<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>极光轨迹</title>
  
  <subtitle>往昔的努力不可辜负，憧憬的未来不可辜负</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.javacoder.fun/"/>
  <updated>2017-05-25T06:25:36.000Z</updated>
  <id>http://www.javacoder.fun/</id>
  
  <author>
    <name>Jxust_CGS</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阿里云服务器配置java web项目环境</title>
    <link href="http://www.javacoder.fun/2017/12/19/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEjava%20web%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/"/>
    <id>http://www.javacoder.fun/2017/12/19/阿里云服务器配置java web项目环境/</id>
    <published>2017-12-19T14:05:17.750Z</published>
    <updated>2017-05-25T06:25:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="申请阿里云服务器"><a href="#申请阿里云服务器" class="headerlink" title="申请阿里云服务器"></a>申请阿里云服务器</h2><p><a href="https://www.aliyun.com/">阿里云</a></p><h2 id="安装jdk、tomcat"><a href="#安装jdk、tomcat" class="headerlink" title="安装jdk、tomcat"></a>安装jdk、tomcat</h2><p><a href="http://blog.csdn.net/evankaka/article/details/50718895">阿里云部署Java web项目初体验 - 林炳文Evankaka的专栏 - 博客频道 - CSDN.NET</a></p><h2 id="配置域名"><a href="#配置域名" class="headerlink" title="配置域名"></a>配置域名</h2><p>申请域名<br>配置域名dns解析地址<br><img src="http://i4.buimg.com/588926/19c5d023d0ea3e8f.png" alt="配置url解析地址"><br><a href="http://blog.csdn.net/sinat_25926481/article/details/51460160">Tomcat配置域名 - 强强强子的博客 - 博客频道 - CSDN.NET</a>  </p>]]></content>
    
    <summary type="html">
    
      最近申请了个阿里云的服务器学习一下如何使用阿里云
    
    </summary>
    
      <category term="阿里云" scheme="http://www.javacoder.fun/categories/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
      <category term="阿里云" scheme="http://www.javacoder.fun/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>（转载）form表单回车提交问题,JS监听回车事件</title>
    <link href="http://www.javacoder.fun/2017/12/19/%E8%A1%A8%E5%8D%95%E9%85%8D%E7%BD%AE%E5%9B%9E%E8%BD%A6%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4/"/>
    <id>http://www.javacoder.fun/2017/12/19/表单配置回车自动提交/</id>
    <published>2017-12-19T14:05:17.730Z</published>
    <updated>2017-09-18T13:12:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="http://www.cnblogs.com/suizhikuo/p/4925086.html">form表单回车提交问题,JS监听回车事件 - 故宫博物院 - 博客园</a></p><h2 id="form表单回车提交问题-JS监听回车事件"><a href="#form表单回车提交问题-JS监听回车事件" class="headerlink" title="form表单回车提交问题,JS监听回车事件"></a>form表单回车提交问题,JS监听回车事件</h2><p>我们有时候希望回车键敲在文本框（input element）里来提交表单（form），但有时候又不希望如此。比如搜索行为，希望输入完关键词之后直接按回车键立即提交表单，而有些复杂表单，可能要避免回车键误操作在未完成表单填写的时候就触发了表单提交。<br>要控制这些行为，不需要借助JS，浏览器已经帮我们做了这些处理，这里总结几条规则： </p><ol><li>如果表单里有一个type=”submit”的按钮，回车键生效。 </li><li>如果表单里只有一个type=”text”的input，不管按钮是什么type，回车键生效。 </li><li>如果按钮不是用input，而是用button，并且没有加type，IE下默认为type=button，FX默认为type=submit。 </li><li>其他表单元素如textarea、select不影响，radio checkbox不影响触发规则，但本身在FX下会响应回车键，在IE下不响应。 </li><li>type=”image”的input，效果等同于type=”submit”，不知道为什么会设计这样一种type，不推荐使用，应该用CSS添加背景图合适些。   </li><li>我们在处理表单的页面可以检验他是否点击了按钮来控制下面的程序。if($_POST[‘submit’]){ 如果点击了按钮 程序继续} </li></ol><p>实际应用的时候，要让表单响应回车键很容易，保证表单里有个type=”submit”的按钮就行。而当只有一个文本框又不希望响应回车键怎么办呢？<br>我的方法有点别扭，就是再写一个无意义的文本框，隐藏起来。<br>根据第3条规则，我们在用button的时候，尽量显式声明type以使浏览器表现一致。<br>通过以上可知只要把type=”submit”改成type=”button”然后js提交， 在不要有一个type=”text”的input就行了。就不会发生回车跳转。<br>但实验发现，ie和火狐不一样，火狐的submit按钮有掩藏的（display：block）和显现的都不行，必须全改，但ie只要显现的没有submit就行了。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;   </span><br><span class="line"></span><br><span class="line">    document.onkeydown=keyDownSearch; </span><br><span class="line">    </span><br><span class="line">    function keyDownSearch(e) &#123;  </span><br><span class="line">        // 兼容FF和IE和Opera  </span><br><span class="line">        var theEvent = e || window.event;  </span><br><span class="line">        var code = theEvent.keyCode || theEvent.which || theEvent.charCode;  </span><br><span class="line">        if (code == 13) &#123;   </span><br><span class="line">            DoSomeThing();//具体处理函数  </span><br><span class="line">            return false;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return true;  </span><br><span class="line">    &#125; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>如果只是针对某个DIV层应用回车查询的话，可以将：<code>document.onkeydown=keyDownSearch;</code>改成：<code>document.getElementById(&#39;层ID&#39;).onkeydown=keyDownSearch;</code>  </p>]]></content>
    
    <summary type="html">
    
      在form表单中经常会遇到需要添加回车提交表单的需求场景，不过浏览器替我们做了部分内容，当只有一个input的情况下默认就可以回车提交，但是如果我们不希望提交应该怎么处理呢？
    
    </summary>
    
      <category term="html" scheme="http://www.javacoder.fun/categories/html/"/>
    
    
      <category term="html" scheme="http://www.javacoder.fun/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>fullcalendarJS使用</title>
    <link href="http://www.javacoder.fun/2017/12/19/%E6%97%A5%E5%8E%86%E6%97%A5%E7%A8%8BfullcalendarJS%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.javacoder.fun/2017/12/19/日历日程fullcalendarJS使用/</id>
    <published>2017-12-19T14:05:17.660Z</published>
    <updated>2017-11-27T14:35:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="预览图"><a href="#预览图" class="headerlink" title="预览图"></a>预览图</h1><p><img src="http://oeb33qix3.bkt.clouddn.com/17-11-2/53038044.jpg" alt="fullcalendar预览图">  </p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol><li>官网下载资源包<br>官网链接：<a href="https://fullcalendar.io/">fullcalendar</a></li><li>创建页面，引用js及css资源包<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.6.2/fullcalendar.min.js</span><br><span class="line">https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.6.2/fullcalendar.min.css</span><br><span class="line">https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.6.2/fullcalendar.print.css</span><br></pre></td></tr></table></figure></li><li>创建div，绑定元素到fullcalendar<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;schedule_panel&quot; style=&quot;max-width: 900px;margin: 40px auto;&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">$(&#x27;#schedule_panel&#x27;).fullCalendar(&#123;</span><br><span class="line">themeSystem: &#x27;&#x27;,//配置主题</span><br><span class="line">customButtons: &#123;            //自定义header属性中按钮[customButtons与header并用]  </span><br><span class="line">                myCustomButton1: &#123;  </span><br><span class="line">                text: &#x27;自定义按钮&#x27;,  </span><br><span class="line">                    click: function() &#123;  </span><br><span class="line">                        alert(&#x27;clicked the custom button!&#x27;);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,  </span><br><span class="line">header: &#123;        //配置标题栏</span><br><span class="line">left: &#x27;prev,next today&#x27;,//左侧显示上一页、下一页、今天3个按钮</span><br><span class="line">center: &#x27;title&#x27;,//中间显示标题</span><br><span class="line">right: &#x27;month,agendaWeek,agendaDay,listMonth&#x27;//右侧显示月视图、周视图、日视图、月事件列表</span><br><span class="line">&#125;,</span><br><span class="line">noEventsMessage : &quot;暂无数据&quot;,   //listview视图下，无数据时显示提示</span><br><span class="line">//defaultDate: &#x27;2017-10-12&#x27;,//默认日期</span><br><span class="line">locale: &#x27;zh-cn&#x27;,//配置语言</span><br><span class="line">//navLinks: true, // 可以点击周名称跳转到周视图</span><br><span class="line">selectable: true,//可以选中，选中后响应select方法</span><br><span class="line">selectHelper: true,//当点击或拖动选择时间时，显示默认加载的提示信息</span><br><span class="line">select: function(start, end) &#123;//选中时间区间后响应js方法</span><br><span class="line">var event=&#123;start : start , end : end &#125;;</span><br><span class="line">schedule.showWin(&#x27;add&#x27;,event);</span><br><span class="line">&#125;,</span><br><span class="line">editable: false,//事件是否可编辑，可编辑是指可以移动, 改变大小等</span><br><span class="line">eventLimit: true, //当事件过多，允许点击“更多”查看</span><br><span class="line">events: [],</span><br><span class="line">eventSources: [</span><br><span class="line">        function (start, end, timezone, callback) &#123;//动态把数据查出，按照月份动态查询viewDisplay</span><br><span class="line">var l_begin_date = moment(start).format(&quot;YYYYMMDD&quot;);//必须大写的YYYY否则不能正常格式化</span><br><span class="line">var l_begin_time = moment(start).format(&quot;HH:mm:ss&quot;);</span><br><span class="line">var l_end_date = moment(end).format(&quot;YYYYMMDD&quot;);</span><br><span class="line">var l_end_time = moment(end).format(&quot;HH:mm:ss&quot;);</span><br><span class="line">$(&quot;#schedule_panel&quot;).fullCalendar(&#x27;removeEvents&#x27;);</span><br><span class="line">$.post(&quot;http://xxx.xxx.xxx.json&quot;, </span><br><span class="line">&#123; l_begin_date:l_begin_date, l_begin_time:l_begin_time, l_end_date:l_end_date, l_end_time:l_end_time &#125;,</span><br><span class="line"> function (data) &#123;</span><br><span class="line">callback(data.eventData);</span><br><span class="line">&#125;</span><br><span class="line">); //把从后台取出的数据进行封装以后在页面上以fullCalendar的方式进行显示</span><br><span class="line">&#125;</span><br><span class="line">    ],</span><br><span class="line">eventClick: function (event) &#123;</span><br><span class="line">                //日程事件点击回调</span><br><span class="line">&#125;,</span><br><span class="line">eventMouseover: function(calEvent, jsEvent, view)&#123;//鼠标在日程区块上时触发  </span><br><span class="line">//$(this).css();</span><br><span class="line">            &#125;,  </span><br><span class="line">            eventMouseout: function(calEvent, jsEvent, view)&#123;//鼠标从日程区块离开时触发  </span><br><span class="line">            &#125;</span><br><span class="line">&#125;);//end of fullcalendar</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      fullcalendar 是一个 JavaScript 框架。通过使用此框架可以很轻松的创建出日历日程界面展示。
    
    </summary>
    
      <category term="fullcalendar.js" scheme="http://www.javacoder.fun/categories/fullcalendar-js/"/>
    
    
      <category term="fullcalendar.js" scheme="http://www.javacoder.fun/tags/fullcalendar-js/"/>
    
  </entry>
  
  <entry>
    <title>常见术语</title>
    <link href="http://www.javacoder.fun/2017/12/19/%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD/"/>
    <id>http://www.javacoder.fun/2017/12/19/常见术语/</id>
    <published>2017-12-19T14:05:17.640Z</published>
    <updated>2017-08-20T12:43:22.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>项目相关术语  </li></ul><table><thead><tr><th style="text-align:left">术语</th><th style="text-align:left">中文释义</th><th style="text-align:left">英文全称</th></tr></thead><tbody><tr><td style="text-align:left">ERP</td><td style="text-align:left">企业资源计划</td><td style="text-align:left">Enterprise resource planning</td></tr><tr><td style="text-align:left">CRM</td><td style="text-align:left">客户关系管理</td><td style="text-align:left">Customer Relational management</td></tr><tr><td style="text-align:left">WMS</td><td style="text-align:left">仓库管理系统</td><td style="text-align:left">Warehouse Management System</td></tr><tr><td style="text-align:left">OMS</td><td style="text-align:left">订单管理系统</td><td style="text-align:left">Order Management System</td></tr><tr><td style="text-align:left">FMS</td><td style="text-align:left">财务系统</td><td style="text-align:left">Financial Management System</td></tr><tr><td style="text-align:left">B2B</td><td style="text-align:left">业务对业务</td><td style="text-align:left">Business to Business</td></tr><tr><td style="text-align:left">C2B</td><td style="text-align:left">客户对业务</td><td style="text-align:left">Consumer to Business</td></tr><tr><td style="text-align:left">CAD</td><td style="text-align:left">计算机辅助设计</td><td style="text-align:left">Computer Aided Design</td></tr><tr><td style="text-align:left">CAM</td><td style="text-align:left">计算机辅助建模</td><td style="text-align:left">Computer Aided Modeling</td></tr></tbody></table><ul><li>java语言相关术语</li></ul><table><thead><tr><th style="text-align:left">术语</th><th style="text-align:left">中文释义</th><th style="text-align:left">英文全称</th></tr></thead><tbody><tr><td style="text-align:left">OOP</td><td style="text-align:left">面向对象编程</td><td style="text-align:left">Object Oriented Programming</td></tr><tr><td style="text-align:left">AOP</td><td style="text-align:left">面向切面编程</td><td style="text-align:left">Aspect Oriented Programming</td></tr><tr><td style="text-align:left">EJB</td><td style="text-align:left">企业JavaBean</td><td style="text-align:left">Enterprise JavaBean</td></tr><tr><td style="text-align:left">DAO</td><td style="text-align:left">数据访问对象</td><td style="text-align:left">Data Access Object</td></tr><tr><td style="text-align:left">POJO</td><td style="text-align:left">简单无规则 java 对象</td><td style="text-align:left">plain ordinary java object</td></tr><tr><td style="text-align:left">DTO</td><td style="text-align:left">数据传输对象</td><td style="text-align:left">Data Transfer Object</td></tr><tr><td style="text-align:left">JPA</td><td style="text-align:left">Java持久层API</td><td style="text-align:left">Java Persistence API</td></tr><tr><td style="text-align:left">IoC</td><td style="text-align:left">控制反转</td><td style="text-align:left">Inversion of Control</td></tr><tr><td style="text-align:left">JTA</td><td style="text-align:left">java事务API</td><td style="text-align:left">Java Transcation API</td></tr><tr><td style="text-align:left">JVM</td><td style="text-align:left">java虚拟机</td><td style="text-align:left">Java Virtual Machine</td></tr><tr><td style="text-align:left">ORM</td><td style="text-align:left">对象关系映射</td><td style="text-align:left">Object Relational Mapping  </td></tr></tbody></table><ul><li>其他术语  </li></ul><table><thead><tr><th style="text-align:left">术语</th><th style="text-align:left">中文释义</th><th style="text-align:left">英文全称</th></tr></thead><tbody><tr><td style="text-align:left">DBMS</td><td style="text-align:left">数据库管理系统</td><td style="text-align:left">Database Management System</td></tr><tr><td style="text-align:left">DNS</td><td style="text-align:left">因特网域名系统</td><td style="text-align:left">Internet Domain Name System</td></tr><tr><td style="text-align:left">FAQ</td><td style="text-align:left">经常问到的问题</td><td style="text-align:left">Frequently Asked Questions</td></tr><tr><td style="text-align:left">SCM</td><td style="text-align:left">软件配置管理</td><td style="text-align:left">Software configuration management </td></tr><tr><td style="text-align:left">FIFO</td><td style="text-align:left">先进先出</td><td style="text-align:left">First in First Out</td></tr><tr><td style="text-align:left">GUI</td><td style="text-align:left">图形用户界面</td><td style="text-align:left">Graphic User Interface  </td></tr></tbody></table><ul><li>常见英语翻译  </li></ul><table><thead><tr><th style="text-align:left">单词</th><th style="text-align:left">中文释义</th></tr></thead><tbody><tr><td style="text-align:left">case-insensitive</td><td style="text-align:left">大小写不敏感</td></tr><tr><td style="text-align:left">case-sensitive</td><td style="text-align:left">大小写敏感</td></tr><tr><td style="text-align:left">Declarative Programming</td><td style="text-align:left">声明式编程  </td></tr><tr><td style="text-align:left">Dependency Injection</td><td style="text-align:left">依赖注入</td></tr><tr><td style="text-align:left">Dialect</td><td style="text-align:left">术语</td></tr><tr><td style="text-align:left">Directive</td><td style="text-align:left">指令</td></tr><tr><td style="text-align:left">Deserialize</td><td style="text-align:left">反序列化</td></tr><tr><td style="text-align:left">Delegate</td><td style="text-align:left">委托</td></tr><tr><td style="text-align:left">Domain</td><td style="text-align:left">域</td></tr><tr><td style="text-align:left">Use Case</td><td style="text-align:left">用例</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      在日常的交流中难免会遇到一些专业术语，总结下java中常见的术语，有额外补充的欢迎评论留言。
    
    </summary>
    
      <category term="杂谈" scheme="http://www.javacoder.fun/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="术语" scheme="http://www.javacoder.fun/tags/%E6%9C%AF%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://www.javacoder.fun/2017/12/19/%E5%AD%A6%E4%B9%A0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.javacoder.fun/2017/12/19/学习设计模式/</id>
    <published>2017-12-19T14:05:17.610Z</published>
    <updated>2017-02-19T14:06:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>本篇基本为自己参考其他博客文章以及自己的一些理解所写，此处保留原文链接。<br>参考博客：<a href="http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html">Java开发中的23种设计模式详解</a><br>另参考<a href="http://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式——菜鸟教程</a>  </p><h2 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h2><p>总体来说设计模式分为三大类：<br>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。<br>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。<br>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。  </p><p><img src="http://oeb33qix3.bkt.clouddn.com/public/16-11-27/39431889.jpg" alt="设计模式">  </p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p>设计模式的六大原则<br>1、开闭原则（Open Close Principle）<br>开闭原则就是说对<strong>扩展开放</strong>，对<strong>修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。<br>2、里氏代换原则（Liskov Substitution Principle）<br>在子类中实现父类的抽象方法<strong>不要覆盖掉父类中已经实现的方法</strong>，这样会导致父类的方法被重写，之后父类如果做修改会给程序带来隐患。<br>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。   里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。   LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科<br>3、依赖倒转原则（Dependence Inversion Principle）<br>这个是开闭原则的基础，具体内容：真对接口编程，<strong>依赖于抽象</strong>而不依赖于具体。<br>4、接口隔离原则（Interface Segregation Principle）<br>这个原则的意思是：使用<strong>多个隔离的接口</strong>，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。<br>5、迪米特法则（最少知道原则）（Demeter Principle）<br>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能<strong>模块相对独立</strong>。<br>6、合成复用原则（Composite Reuse Principle）<br>原则是尽量使用<strong>合成/聚合</strong>的方式，而不是使用继承。  </p><h2 id="介绍下自己对各个模式的理解"><a href="#介绍下自己对各个模式的理解" class="headerlink" title="介绍下自己对各个模式的理解"></a>介绍下自己对各个模式的理解</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>用于对功能的扩展的场景：就是对需要完成的事情的不同实现，也就是通过工厂用不同的方式去完成同一件事情。如：发送，有两种实现，发送信息，发送邮件，而工厂就会提供这两种不同的方式去完成发送的任务。用于扩展功能的时候只需要添加<strong><em>不同的实现</em></strong>到工厂类中即可。<br>1、您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。<br>2、Hibernate 换数据库只需换方言和驱动就可以。  </p><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p>及在工厂模式的基础上，创建不同的工厂分别以对应的方式去完成相同的任务。用于扩展功能的时候添加<strong><em>不同的工厂</em></strong>即可。<br>1、QQ 换皮肤，一整套一起换。<br>2、生成不同操作系统的程序。  </p><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>使用getInstance()范式避免重复创建对象，在整个程序中只创建单个对象，常用于核心控制类，或存储全局变量的类中。例如安卓中的application类<br>1、一个党只能有一个主席。<br>2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。<br>3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。  </p><h4 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h4><p>在一个类中包含各种不同的实现方法，例如：sql中的dao类提供了sql数据操作的所需方法。<br>1、肯德基套餐，肯德基就是个建造者，只需要点不同的套餐就会返回不同的组合。<br>与工厂模式对比：<br>工厂模式一个工厂提供对一个事件的一种实现，关注单个事件<br>建造者模式一个建造者返回对一个对象的不同组合实现，关注返回一种对象的组合  </p><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><p>原型模式就是对已有对象的复制，实现实现Cloneable接口，需要注意下在复制对象的时候就会涉及到深拷贝与浅拷贝。<br>深拷贝与浅拷贝问题中，会发生深拷贝的有java中的8中基本类型以及他们的封装类型，另外还有String类型。其余的都是浅拷贝。<br>具体查看<a href="http://cmsblogs.com/?p=367">设计模式读书笔记—–原型模式</a>，个人认为本篇对原型模式的介绍很不错，详细了解还是要靠百度参考多位前辈的博文。<br>应用场景：<br> 1、资源优化场景。<br> 2、类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。<br> 3、性能和安全要求的场景。<br> 4、通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。<br> 5、一个对象多个修改者的场景。<br> 6、一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。<br> 7、在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用。  </p><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><p><img src="http://oeb33qix3.bkt.clouddn.com/public/16-11-20/47455872.jpg" alt="image">   </p><h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><p>改变源的接口，以便于目标接口相容<br>1、类的适配器模式：当希望将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口即可。<br>2、对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Wrapper类，持有原类的一个实例，在Wrapper类的方法中，调用实例的方法就行。<br>3、接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，实现所有方法，我们写别的类的时候，继承抽象类即可。  </p><h4 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h4><p>装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例，如切面编程在对原有对象进行包装盒修改时。  </p><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>代理模式就是多一个代理类出来，替原对象进行一些操作。  </p><ul><li>装饰模式和代理模式的差别是什么？<ul><li>装饰器模式关注于在一个对象上动态的添加方法</li><li>代理模式关注于控制对对象的访问。代理类（proxy class） 可以对它的客户 隐藏一个对象的具体信息。     </li><li>当使用代理模式的时候，我们常常在一个代理类中 <strong>创建一个对象</strong>的实例。</li><li>当使用装饰器模式的时候，我们通常的做法是将原始对象作<strong>为一个参数传给装饰者</strong>的构造器。  </li></ul></li></ul><h4 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h4><p>外观模式就像是对几个对象之间的关系抽离到一个新类中管理，相当于包装组合，是被包装的类与类之间没有关系，达到解耦的目的。<br>如：计算机中的cpu、鼠标、键盘、内存条等部件之间会相互调用但是相互之间并没有直接连线，就是通过主板来将他们整合包装在一起，而每个部件都是相对独立没有关联。  </p><h4 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h4><p>桥接模式，将抽象化与实现化解耦，使得二者可以独立变化，就是通过定义接口规范，各自可以采用不同的实现，但是要调用要遵循规范。<br>如：jdbc中连接数据库，只需要切换DriverManager，就能连接不同的数据库。各个数据库提供商也是根据java的jdbc规范来实现对应的方法。</p><h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4><p>将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。<br>例如在部门类中持有员工类列表。</p><h4 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h4><p>享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。</p><h4 id="过滤器模式"><a href="#过滤器模式" class="headerlink" title="过滤器模式"></a>过滤器模式</h4><p>过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。<br>1、需要创建不同的过滤器（实现过滤接口）<br>2、组合不同的过滤器用于筛选对象<br>3、以解耦的方式关联符合标准的对象。  </p><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><p>策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户。需要设计一个接口，为一系列实现类提供统一的方法，多个实现类实现该接口，设计一个抽象类（可有可无，属于辅助类），提供辅助函数  </p><ul><li>策略模式和工厂模式的异同<ul><li>从实现模式的类的关系图看结构十分相似：工厂模式，创建一个接口，提供对此接口的不同实现，工厂类决定生产产品的方式与结果；策略模式，创建一个接口，提供对此接口的不同实现，可以在运行时动态更改采用的策略；  </li><li>一个是行为型模式，一个是创建型模式；  </li><li>策略模式关注的是实现的路线不同（去上班，骑自行车去、走路去等方式的不同）；  </li><li>工厂模式关注的是不同结果（出去，去公司、去商场）。  </li></ul></li></ul><h4 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h4><p>一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。</p><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><p>当一个对象变化时，其它依赖该对象的对象都会收到通知，并且随着变化！对象之间是一种一对多的关系<br>被观察的对象有一个通知列表，当被观察的对象发生变化就会对所有的订阅者发送通知。</p><h4 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h4><p>迭代器模式就是顺序访问聚集中的对象，一是需要遍历的对象，即聚集对象，二是迭代器对象，用于对聚集对象进行遍历访问。<br>就是指iterator与Collection。迭代器持有一个集合对象，并提供方法去操作集合类达到迭代的目的。  </p><h4 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h4><p>为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。通俗的降就是层级处理事件，比如请假、员工向公司领导请假，根据天数的不同需要不同级别的领导来处理决定，事件的处理责任就形成了链式的流动关系。<br>在我们程序中也有用的到，比如在java web中就有事件多级截形成责任链、 在android中对Touch事件的分发就是一个责任链的过程  </p><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><p>命令、老板、员工三者相互解耦，任何一方都不用去依赖其他人，只需要做好自己的事儿就行。<br>命令模式顾名思义、就是指挥者发送指令，操作者去执行。<br>在我们的代码中的引用十分广泛、如：struts中就通过url对应方法与页面、android中handler中的message指令、等</p><h4 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h4><p>备忘录模式就是一种备份的机制、在程序运行是对一些数据进行备份，在需要的时候可以回复。<br>如在android中的Bundle savedInstanceState、用于存储acitvity的运行状态。</p><h4 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h4><p>顾名思义、就是设置状态值、用于表示对象的当前状态。<br>如，用户的状态、在线、离线、无效、隐身。</p><h4 id="空对象模式"><a href="#空对象模式" class="headerlink" title="空对象模式"></a>空对象模式</h4><p>在空对象模式（Null Object Pattern）中，一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。<br>空对象模式，个人觉得应该是叫默认值模式，就是为了避免程序出错而给异常数据一个默认对象。  </p><h4 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h4><p>访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。访问者模式适用于数据结构相对稳定算法又易变化的系统。因为访问者模式使得算法操作增加变得容易。若系统数据结构对象易于变化，经常有新的数据对象增加进来，则不适合使用访问者模式。访问者模式的优点是增加操作很容易，因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到一个访问者对象中，其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。—— From 百科<br>适用于先对稳定的系统或数据结构中、将算法及操作分离到访问者中去执行。<br>被访问者需要开方接口给访问者，而当并向访问者提供一个被访问者的实例这样访问者就可以调用被访问者的数据了。</p><pre><code>public interface Visitor &#123;    public void visit(Subject sub);&#125;public class MyVisitor implements Visitor &#123;    @Override    public void visit(Subject sub) &#123;        System.out.println(&quot;visit the subject：&quot;+sub.getSubject());    &#125;&#125;public interface Subject &#123;    public void accept(Visitor visitor);    public String getSubject();&#125;public class MySubject implements Subject &#123;    @Override    public void accept(Visitor visitor) &#123;//被访问者提供接口，接入访问者        visitor.visit(this);//访问者获得宿主的一个实例，之后就能得到宿主的所有数据及操作。    &#125;    @Override    public String getSubject() &#123;        return &quot;love&quot;;    &#125;&#125;public class Test &#123;    public static void main(String[] args) &#123;        Visitor visitor = new MyVisitor();        Subject sub = new MySubject();        sub.accept(visitor);        &#125;&#125;</code></pre><p>摘自：<a href="http://blog.csdn.net/zhangerqing/article/details/8245537">Java之美[从菜鸟到高手演变]之设计模式四</a></p><h4 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h4><p>为了解耦将多个关联的对象的关系放到中介者中去维护。<br>这样做的好处是，原本多对象需要互相持有一个对象来维持他们的关系，现在只需要将所有对象持有一个中介者，而中介者则持有这些关联的对象。</p><h4 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h4><p>解释器就是针对一个指令进行解释执行的。具体项目应用中使用较少。解释器需要根据上下文进行解析。</p><pre><code>public interface Expression &#123;    public int interpret(Context context);&#125;public class Plus implements Expression &#123;    @Override    public int interpret(Context context) &#123;        return context.getNum1()+context.getNum2();    &#125;&#125;public class Minus implements Expression &#123;    @Override    public int interpret(Context context) &#123;        return context.getNum1()-context.getNum2();    &#125;&#125;public class Context &#123;    private int num1;    private int num2;    public Context(int num1, int num2) &#123;        this.num1 = num1;        this.num2 = num2;    &#125;    public int getNum1() &#123;        return num1;    &#125;    public void setNum1(int num1) &#123;        this.num1 = num1;    &#125;    public int getNum2() &#123;        return num2;    &#125;    public void setNum2(int num2) &#123;        this.num2 = num2;    &#125;&#125;public class Test &#123;    public static void main(String[] args) &#123;        // 计算9+2-8的值        int result = new Minus().interpret((new Context(new Plus()                .interpret(new Context(9, 2)), 8)));        System.out.println(result);    &#125;&#125;</code></pre><h3 id="分层模式"><a href="#分层模式" class="headerlink" title="分层模式"></a>分层模式</h3><h4 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h4><p>MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。  </p><ul><li>Model（模型） - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。  </li><li>View（视图） - 视图代表模型包含的数据的可视化。  </li><li>Controller（控制器） - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。  </li></ul><h4 id="业务代表模式"><a href="#业务代表模式" class="headerlink" title="业务代表模式"></a>业务代表模式</h4><p>业务代表模式（Business Delegate Pattern）用于对表示层和业务层解耦。它基本上是用来减少通信或对表示层代码中的业务层代码的远程查询功能。在业务层中我们有以下实体。</p><ul><li>客户端（Client） - 表示层代码可以是 JSP、servlet 或 UI java 代码。</li><li>业务代表（Business Delegate） - 一个为客户端实体提供的入口类，它提供了对业务服务方法的访问。</li><li>查询服务（LookUp Service） - 查找服务对象负责获取相关的业务实现，并提供业务对象对业务代表对象的访问。</li><li>业务服务（Business Service） - 业务服务接口。实现了该业务服务的实体类，提供了实际的业务实现逻辑。</li></ul><h4 id="组合实体模式"><a href="#组合实体模式" class="headerlink" title="组合实体模式"></a>组合实体模式</h4><p>组合实体模式（Composite Entity Pattern）用在 EJB 持久化机制中。一个组合实体是一个 EJB 实体 bean，代表了对象的图解。当更新一个组合实体时，内部依赖对象 beans 会自动更新，因为它们是由 EJB 实体 bean 管理的。以下是组合实体 bean 的参与者。</p><ul><li>组合实体（Composite Entity） - 它是主要的实体 bean。它可以是粗粒的，或者可以包含一个粗粒度对象，用于持续生命周期。</li><li>粗粒度对象（Coarse-Grained Object） - 该对象包含以来对象。它有自己的生命周期，也能管理依赖对象的生命周期。</li><li>依赖对象（Dependent Object） - 依赖对象是一个持续生命周期依赖于粗粒度对象的对象。</li><li>策略（Strategies） - 策略表示如何实现组合实体。</li></ul><h4 id="数据访问对象模式"><a href="#数据访问对象模式" class="headerlink" title="数据访问对象模式"></a>数据访问对象模式</h4><p>数据访问对象模式（Data Access Object Pattern）或 DAO 模式用于把低级的数据访问 API 或操作从高级的业务服务中分离出来。以下是数据访问对象模式的参与者。</p><ul><li>数据访问对象接口（Data Access Object Interface） - 该接口定义了在一个模型对象上要执行的标准操作。</li><li>数据访问对象实体类（Data Access Object concrete class） - 该类实现了上述的接口。该类负责从数据源获取数据，数据源可以是数据库，也可以是 xml，或者是其他的存储机制。</li><li>模型对象/数值对象（Model Object/Value Object） - 该对象是简单的 POJO，包含了 get/set 方法来存储通过使用 DAO 类检索到的数据。</li></ul><h4 id="前端控制器模式"><a href="#前端控制器模式" class="headerlink" title="前端控制器模式"></a>前端控制器模式</h4><p>前端控制器模式（Front Controller Pattern）是用来提供一个集中的请求处理机制，所有的请求都将由一个单一的处理程序处理。该处理程序可以做认证/授权/记录日志，或者跟踪请求，然后把请求传给相应的处理程序。以下是这种设计模式的实体。</p><ul><li>前端控制器（Front Controller） - 处理应用程序所有类型请求的单个处理程序，应用程序可以是基于 web 的应用程序，也可以是基于桌面的应用程序。</li><li>调度器（Dispatcher） - 前端控制器可能使用一个调度器对象来调度请求到相应的具体处理程序。</li><li>视图（View） - 视图是为请求而创建的对象。</li></ul><h4 id="拦截过滤器模式"><a href="#拦截过滤器模式" class="headerlink" title="拦截过滤器模式"></a>拦截过滤器模式</h4><p>拦截过滤器模式（Intercepting Filter Pattern）用于对应用程序的请求或响应做一些预处理/后处理。定义过滤器，并在把请求传给实际目标应用程序之前应用在请求上。过滤器可以做认证/授权/记录日志，或者跟踪请求，然后把请求传给相应的处理程序。以下是这种设计模式的实体。</p><ul><li>过滤器（Filter） - 过滤器在请求处理程序执行请求之前或之后，执行某些任务。</li><li>过滤器链（Filter Chain） - 过滤器链带有多个过滤器，并在 Target 上按照定义的顺序执行这些过滤器。</li><li>Target - Target 对象是请求处理程序。</li><li>过滤管理器（Filter Manager） - 过滤管理器管理过滤器和过滤器链。</li><li>客户端（Client） - Client 是向 Target 对象发送请求的对象。</li></ul><h4 id="服务定位器模式"><a href="#服务定位器模式" class="headerlink" title="服务定位器模式"></a>服务定位器模式</h4><p>服务定位器模式（Service Locator Pattern）用在我们想使用 JNDI 查询定位各种服务的时候。考虑到为某个服务查找 JNDI 的代价很高，服务定位器模式充分利用了缓存技术。在首次请求某个服务时，服务定位器在 JNDI 中查找服务，并缓存该服务对象。当再次请求相同的服务时，服务定位器会在它的缓存中查找，这样可以在很大程度上提高应用程序的性能。以下是这种设计模式的实体。</p><ul><li>服务（Service） - 实际处理请求的服务。对这种服务的引用可以在 JNDI 服务器中查找到。</li><li>Context / 初始的 Context - JNDI Context 带有对要查找的服务的引用。</li><li>服务定位器（Service Locator） - 服务定位器是通过 JNDI 查找和缓存服务来获取服务的单点接触。</li><li>缓存（Cache） - 缓存存储服务的引用，以便复用它们。</li><li>客户端（Client） - Client 是通过 ServiceLocator 调用服务的对象。</li></ul><h4 id="传输对象模式"><a href="#传输对象模式" class="headerlink" title="传输对象模式"></a>传输对象模式</h4><p>传输对象模式（Transfer Object Pattern）用于从客户端向服务器一次性传递带有多个属性的数据。传输对象也被称为数值对象。传输对象是一个具有 getter/setter 方法的简单的 POJO 类，它是可序列化的，所以它可以通过网络传输。它没有任何的行为。服务器端的业务类通常从数据库读取数据，然后填充 POJO，并把它发送到客户端或按值传递它。对于客户端，传输对象是只读的。客户端可以创建自己的传输对象，并把它传递给服务器，以便一次性更新数据库中的数值。以下是这种设计模式的实体。</p><ul><li>业务对象（Business Object） - 为传输对象填充数据的业务服务。</li><li>传输对象（Transfer Object） - 简单的 POJO，只有设置/获取属性的方法。</li><li>客户端（Client） - 客户端可以发送请求或者发送传输对象到业务对象。</li></ul>]]></content>
    
    <summary type="html">
    
      设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。
    
    </summary>
    
      <category term="设计模式" scheme="http://www.javacoder.fun/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.javacoder.fun/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>学习别人代码之多彩资讯</title>
    <link href="http://www.javacoder.fun/2017/12/19/%E5%AD%A6%E4%B9%A0%E5%88%AB%E4%BA%BA%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%A4%9A%E5%BD%A9%E8%B5%84%E8%AE%AF/"/>
    <id>http://www.javacoder.fun/2017/12/19/学习别人代码之多彩资讯/</id>
    <published>2017-12-19T14:05:17.590Z</published>
    <updated>2017-05-25T05:56:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多彩资讯是什么？"><a href="#多彩资讯是什么？" class="headerlink" title="多彩资讯是什么？"></a>多彩资讯是什么？</h2><p>多彩资讯是<a href="https://github.com/kaku2015/">咖枯</a>写的一个遵循material design风格的新闻类app、其中使用了很多开源库Dagger2、RxJava、Retrofit2、Butterknife、Greendao、PhotoView、Glide、Picasso…<br>多彩资讯源码链接:<a href="https://github.com/kaku2015/ColorfulNews">kaku2015/ColorfulNews: A news-reading App </a><br>最近没怎么写android代码了，希望自己不要荒废，因此借着拜读别人的代码来学习下关于material design风格app，也学习下一些比较新的开源库，还有就是熟悉用android studio尤其是用gradle构建工程。  </p><h2 id="Butterknife"><a href="#Butterknife" class="headerlink" title="Butterknife"></a>Butterknife</h2><p>1、首先需要添加依赖包  </p><ul><li>在项目mode对应的.gradle文件顶部中添加：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &#x27;com.neenbedankt.android-apt&#x27;</span><br></pre></td></tr></table></figure></li><li>在dependencies{}中添加：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt &#x27;com.jakewharton:butterknife-compiler:8.0.1&#x27;</span><br><span class="line">compile &#x27;com.jakewharton:butterknife:8.0.1&#x27;</span><br></pre></td></tr></table></figure>2、通过@BindView绑定页面元素<br>3、在onCreate方法中setContentView之后添加ButterKnife.bind(this);  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import butterknife.BindView;  </span><br><span class="line">import butterknife.ButterKnife;  </span><br><span class="line"></span><br><span class="line">class ExampleActivity extends Activity &#123;</span><br><span class="line">  @BindView(R.id.user) EditText username;</span><br><span class="line">  @BindView(R.id.pass) EditText password;</span><br><span class="line"></span><br><span class="line">  @BindString(R.string.login_error) String loginErrorMessage;</span><br><span class="line"></span><br><span class="line">  @OnClick(R.id.submit) void submit() &#123;</span><br><span class="line">    // TODO call server...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.simple_activity);</span><br><span class="line">    //以前用的是ButterKnife.inject()来绑定Activity,现在用的是ButterKnife.bind()，版本不同相应的方法不同</span><br><span class="line">    ButterKnife.bind(this);</span><br><span class="line">    // TODO Use fields...</span><br><span class="line">  &#125;</span><br><span class="line">  @Override  </span><br><span class="line">  public void onDestroyView() &#123;  </span><br><span class="line">      super.onDestroyView();  </span><br><span class="line">      ButterKnife.unbind(this);//解绑  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a href="https://github.com/JakeWharton/butterknife">github-JakeWharton/butterknife</a><br><a href="http://blog.csdn.net/itjianghuxiaoxiong/article/details/50177549">ButterKnife使用详解</a><br><a href="ButterknifeZelezny在AndroidStudio中的配置与使用方法">ButterknifeZelezny在AndroidStudio中的配置与使用方法</a>  </li></ul><h2 id="AnimationUtils和ValueAnimator"><a href="#AnimationUtils和ValueAnimator" class="headerlink" title="AnimationUtils和ValueAnimator"></a>AnimationUtils和ValueAnimator</h2><p>(1)Frame Animation(帧动画)主要用于播放一帧帧准备好的图片，类似GIF图片，优点是使用简单方便、缺点是需要事先准备好每一帧图片；<br>(2)Tween Animation(补间动画)仅需定义开始与结束的关键帧，而变化的中间帧由系统补上，优点是不用准备每一帧，缺点是只改变了对象绘制，而没有改变View本身属性。因此如果改变了按钮的位置，还是需要点击原来按钮所在位置才有效。<br>(3)Property Animation(属性动画)是3.0后推出的动画，优点是使用简单、降低实现的复杂度、直接更改对象的属性、几乎可适用于任何对象而仅非View类，缺点是需要3.0以上的API支持，限制较大！但是目前国外有个开源库，可以提供低版本支持！  </p><h2 id="Android-View-Animations"><a href="#Android-View-Animations" class="headerlink" title="Android View Animations"></a>Android View Animations</h2><p>1、首先需要添加依赖包<br>2、就使用YoYo类来选择动画、时间、绑定对象<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">compile &#x27;com.nineoldandroids:library:2.4.0&#x27;</span><br><span class="line">compile &#x27;com.daimajia.easing:library:1.0.1@aar&#x27;</span><br><span class="line">compile &#x27;com.daimajia.androidanimations:library:1.1.3@aar&#x27;</span><br><span class="line">YoYo.with(Techniques.Tada)</span><br><span class="line">    .duration(700)</span><br><span class="line">    .playOn(findViewById(R.id.edit_area));</span><br></pre></td></tr></table></figure><br>YoYo的设计采用了访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。访问者模式适用于数据结构相对稳定算法又易变化的系统。因为访问者模式使得算法操作增加变得容易。  </p><p><a href="https://github.com/daimajia/AndroidViewAnimations">github-daimajia/AndroidViewAnimations</a></p><h1 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h1><p><a href="http://blog.csdn.net/vector_yi/article/details/24719873">MVP模式在Android开发中的应用</a><br><a href="http://www.cnblogs.com/end/archive/2011/06/02/2068512.html">MVC和MVP的区别 - 风生水起 - 博客园</a></p><h1 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h1><p><a href="http://gank.io/post/560e15be2dca930e00da1083">给 Android 开发者的 RxJava 详解</a></p><h1 id="RxBus"><a href="#RxBus" class="headerlink" title="RxBus"></a>RxBus</h1><p><a href="http://www.jianshu.com/p/ca090f6e2fe2">用RxJava实现事件总线(Event Bus)</a></p><h1 id="annotation注解"><a href="#annotation注解" class="headerlink" title="annotation注解"></a>annotation注解</h1><p><a href="http://www.cnblogs.com/peida/archive/2013/04/24/3036689.html">深入理解Java：注解（Annotation）自定义注解入门 - peida - 博客园</a></p><h1 id="Dagger2"><a href="#Dagger2" class="headerlink" title="Dagger2"></a>Dagger2</h1><p><a href="http://blog.csdn.net/u012943767/article/details/51897247">Dagger2 这次入门就不用放弃了 - Jaml - 博客频道 - CSDN.NET</a></p><h1 id="android-support-v4-widget-DrawerLayout"><a href="#android-support-v4-widget-DrawerLayout" class="headerlink" title="android.support.v4.widget.DrawerLayout"></a>android.support.v4.widget.DrawerLayout</h1><p>图片显示</p><h1 id="android-support-design-widget-NavigationView"><a href="#android-support-design-widget-NavigationView" class="headerlink" title="android.support.design.widget.NavigationView"></a>android.support.design.widget.NavigationView</h1><p>侧划出菜单</p><h1 id="include"><a href="#include" class="headerlink" title="include"></a>include</h1><p>加载xml组合显示</p><h1 id="android-support-design-widget-FloatingActionButton"><a href="#android-support-design-widget-FloatingActionButton" class="headerlink" title="android.support.design.widget.FloatingActionButton"></a>android.support.design.widget.FloatingActionButton</h1><p>协调(Coordinate)其他组件, 实现联动.</p><h1 id="android-support-design-widget-AppBarLayout"><a href="#android-support-design-widget-AppBarLayout" class="headerlink" title="android.support.design.widget.AppBarLayout"></a>android.support.design.widget.AppBarLayout</h1><p>app的actionbar</p><h1 id="android-support-v7-widget-Toolbar"><a href="#android-support-v7-widget-Toolbar" class="headerlink" title="android.support.v7.widget.Toolbar"></a>android.support.v7.widget.Toolbar</h1><p>侧滑按键，实现动画效果</p><h1 id="android-support-design-widget-TabLayout"><a href="#android-support-design-widget-TabLayout" class="headerlink" title="android.support.design.widget.TabLayout"></a>android.support.design.widget.TabLayout</h1><p>显示选显卡，android.support.v4.view.ViewPager</p><h1 id="android-support-v4-view-ViewPager"><a href="#android-support-v4-view-ViewPager" class="headerlink" title="android.support.v4.view.ViewPager"></a>android.support.v4.view.ViewPager</h1><h1 id="Snackbar"><a href="#Snackbar" class="headerlink" title="Snackbar"></a>Snackbar</h1><h1 id="LeakCanary"><a href="#LeakCanary" class="headerlink" title="LeakCanary"></a>LeakCanary</h1><p>用于检测软件的内存泄漏，<br><a href="https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/">LeakCanary 中文使用说明 | Yet Another Summer Rain</a></p><h1 id="RefWatcher"><a href="#RefWatcher" class="headerlink" title="RefWatcher"></a>RefWatcher</h1><h1 id="ActivityLifecycleCallbacks"><a href="#ActivityLifecycleCallbacks" class="headerlink" title="ActivityLifecycleCallbacks"></a>ActivityLifecycleCallbacks</h1><p>android 4.0 之后在application类中提供接口ActivityLifecycleCallbacks<br>用于监听activity的生命周期、打log，用于跟踪activity运行流程。</p><h1 id="Klog"><a href="#Klog" class="headerlink" title="Klog"></a>Klog</h1><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/1115/3685.html">Android专用Log开源项目——KLog - 泡在网上的日子</a></p>]]></content>
    
    <summary type="html">
    
      多彩资讯是咖枯写的一个遵循material design风格的新闻类app、其中使用了很多开源库Dagger2、RxJava、Retrofit2、Butterknife、Greendao、PhotoView、Glide、Picasso…
    
    </summary>
    
      <category term="android" scheme="http://www.javacoder.fun/categories/android/"/>
    
    
      <category term="android" scheme="http://www.javacoder.fun/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>使用超级终端向手机发送at指令</title>
    <link href="http://www.javacoder.fun/2017/12/19/%E4%BD%BF%E7%94%A8%E8%B6%85%E7%BA%A7%E7%BB%88%E7%AB%AF%E5%90%91%E6%89%8B%E6%9C%BA%E5%8F%91%E9%80%81at%E6%8C%87%E4%BB%A4/"/>
    <id>http://www.javacoder.fun/2017/12/19/使用超级终端向手机发送at指令/</id>
    <published>2017-12-19T14:05:16.860Z</published>
    <updated>2017-05-25T06:38:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h2><p>在手机modem处理的工作中测试手机，需要向手机发送at指令  </p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>下载并安装超级终端,这里给个链接–&gt;<a href="http://www.cr173.com/soft/44407.html">超级终端</a><br>将手机连接到电脑，进入工模选项，打开ATCI选项<br>mtk手机操作步骤如下</p><ul><li>进入拨号盘，输入”*#*#3646633#*#*“</li><li>选择”Log and Debugging”,进入”ATCI”</li><li>设置”Always enable ATCI”<br><img src="http://i4.buimg.com/588926/f84ce1dabcdcdb89.png" alt="打开拨号盘"><br><img src="http://i1.piimg.com/588926/8e48b8f18c973b6f.png" alt="设置ATCI"><br><img src="http://i4.buimg.com/588926/31a497305ceabfdf.png" alt="选择Always enable ATCI"></li><li>打开超级终端，新建连接   </li><li>连接名称任意，按默认操作即可  </li><li>连接完成后输入at指令进行测试<br><img src="http://i4.buimg.com/588926/ad83b4b38f33e43c.png" alt="打开超级终端新建链接"><br><img src="http://i4.buimg.com/588926/c91c8a55f149b112.png" alt="选择端口"><br><img src="http://i4.buimg.com/588926/e3fa8c45db63595c.png" alt="选择默认属性"><br><img src="http://i4.buimg.com/588926/ab59867823a10114.png" alt="输入at指令"><h2 id="常用at指令"><a href="#常用at指令" class="headerlink" title="常用at指令"></a>常用at指令</h2><a href="https://wenku.baidu.com/view/7561b26ea98271fe910ef974.html">常用AT指令(中文)_百度文库</a></li></ul>]]></content>
    
    <summary type="html">
    
      在手机modem问题分析的时候需要通过usb向手机发送at指令查看手机的运行情况，这时就需要超级终端来操作手机
    
    </summary>
    
      <category term="modem" scheme="http://www.javacoder.fun/categories/modem/"/>
    
    
      <category term="超级终端,at指令" scheme="http://www.javacoder.fun/tags/%E8%B6%85%E7%BA%A7%E7%BB%88%E7%AB%AF-at%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>使用selenium+python自动化操作浏览器</title>
    <link href="http://www.javacoder.fun/2017/12/19/%E4%BD%BF%E7%94%A8selenium+python%E8%87%AA%E5%8A%A8%E5%8C%96%E6%93%8D%E4%BD%9C%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>http://www.javacoder.fun/2017/12/19/使用selenium+python自动化操作浏览器/</id>
    <published>2017-12-19T14:05:16.680Z</published>
    <updated>2017-02-19T13:57:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="了解selenium"><a href="#了解selenium" class="headerlink" title="了解selenium"></a>了解selenium</h1><p>Selenium 是ThoughtWorks专门为Web应用程序编写的一个验收测试工具。也就是会自动操作浏览器去访问网页，并能获取页面上的数据。<br><a href="http://www.seleniumhq.org/">Selenium官网</a><br><a href="http://www.yiibai.com/selenium/">Selenium教程</a><br><a href="http://www.51testing.com/zhuanti/selenium.html">功能自动化测试工具——Selenium篇</a>  </p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul><li>安装python2.7  </li><li>安装谷歌浏览器及谷歌浏览器驱动（也可以是<a href="http://www.seleniumhq.org/projects/webdriver/">其他浏览器</a>）  </li><li>配置环境变量  <ul><li>x:\Python27;  </li><li>x:\Python27\Scripts;  </li><li>x:\Program Files (x86)\Google\Chrome\Application;  </li></ul></li><li>安装pip 执行easy_install pip 在线安装</li><li>安装selenium for python，执行pip install selenium  </li><li>测试一段程序，调用浏览器驱动启动浏览器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">import time</span><br><span class="line">def main():</span><br><span class="line">    b=webdriver.Chrome()</span><br><span class="line">    b.get(&#x27;http://www.baidu.com&#x27;)</span><br><span class="line">    time.sleep(5)</span><br><span class="line">    b.quit()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="自动执行动作"><a href="#自动执行动作" class="headerlink" title="自动执行动作"></a>自动执行动作</h1>|动作|代码|<br>|:–|:–|<br>|打开浏览器|b=webdriver.Chrome()|<br>|打开网址|b.get(‘<a href="http://www.baidu.com&#39;)|">http://www.baidu.com&#39;)|</a><br>|最大化浏览器|self.browser.maximize_window()|<br>|关闭浏览器|self.browser.quit()|<br>|等待浏览器响应，直到对应element出现|WebDriverWait(self.browser,1000).until(EC.visibility_of_element_located((By.NAME,’username’)))|<br>|在输入框输入数据|self.browser.find_element_by_name(‘username’).send_keys(userName)|<br>|浏览器显示页面停留到对应element所在处|self.browser.find_element_by_id(‘main_menu_dashboard’).location_once_scrolled_into_view|<br>|获得数据|value=self.browser.find_element_by_id(‘option_1’).get_attribute(‘value’)|<br>|点击动作|self.browser.find_element_by_id(‘button’).click()|</li><li>有时click命令不能找到element时可以尝试用script来执行click动作  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmp=self.browser.find_element_by_xpath(&quot;//option[@value=&#x27;25&#x27;]&quot;)  </span><br><span class="line">self.browser.execute_script(&#x27;$(arguments[0]).click()&#x27;,tmp)   </span><br></pre></td></tr></table></figure></li></ul><h1 id="定位页面元素——xpath"><a href="#定位页面元素——xpath" class="headerlink" title="定位页面元素——xpath"></a>定位页面元素——xpath</h1><p>在执行完动作后打开了我们需要的页面，我们就需要获取页面上的元素，这时就要定位到页面的元素，熟悉css的同学就知道了element元素，可以像css类似的方式定位，也可以使用xpath去定位。  </p><p><a href="http://www.w3school.com.cn/xpath/index.asp">xpath教程</a></p>]]></content>
    
    <summary type="html">
    
      自动化操作浏览器，在需要经常操作浏览器查询数据，可以通过selenium+python写一个脚本自动运行操作浏览器获取网页上的数据。
    
    </summary>
    
      <category term="python" scheme="http://www.javacoder.fun/categories/python/"/>
    
    
      <category term="selenium" scheme="http://www.javacoder.fun/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>velocity模板引擎</title>
    <link href="http://www.javacoder.fun/2017/12/19/velocity%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    <id>http://www.javacoder.fun/2017/12/19/velocity模板引擎/</id>
    <published>2017-12-19T14:05:16.650Z</published>
    <updated>2017-07-30T02:11:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="velocity工作流程"><a href="#velocity工作流程" class="headerlink" title="velocity工作流程"></a>velocity工作流程</h1><ul><li>初始化VelocityEngine</li><li>创建Context对象</li><li>添加数据到Context </li><li>选择模板</li><li>合并模板和数据产生输出数据或者页面<h1 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h1></li><li>Velocity 文件（hello.vm)  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt; </span><br><span class="line">    &lt;body&gt; </span><br><span class="line">        &lt;table&gt; </span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;hello $name&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt; </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li>这个例子的输出效果为：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello Velocity</span><br></pre></td></tr></table></figure><h1 id="VTL语法"><a href="#VTL语法" class="headerlink" title="VTL语法"></a>VTL语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2>类似java的注释方式只不过将“/”改为了“#”</li><li>单行注释<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## This text is not visible. </span><br></pre></td></tr></table></figure></li><li>多行注释<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#* This text, as part of a multi-line comment,</span><br><span class="line">is not visible. This text is not visible; it is also part of the</span><br><span class="line">multi-line comment. This text still not visible. *#</span><br></pre></td></tr></table></figure></li><li>文档注释<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#** </span><br><span class="line">This text, as part of a multi-line comment,</span><br><span class="line">is not visible. This text is not visible; it is also part of the</span><br><span class="line">multi-line comment. This text still not visible. </span><br><span class="line"> *#</span><br></pre></td></tr></table></figure><h2 id="引用-References"><a href="#引用-References" class="headerlink" title="引用(References)"></a>引用(References)</h2>VTL中有三种类型的引用：变量，属性和方法。作为使用VTL的设计者，你和你的工程师必须在饮用的特定命名上取得一致，以便在你的模板中正确的使用他们。<br>引用的所有参数都处理为字符串对象，假如有一个对象表示$foo(比如说是整型对象)，Velocity将调用其toString()方法来将此对象转换为一个字符串。</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的简略标记是有一个前导”$”字符后跟一个VTL标识符（Identifier.）组成。一个VTL标识符必须以一个字母开始(a..z或A..Z)。剩下的字符将由以下类型的字符组成：</p><ul><li>字母(a..z,A..Z)</li><li>数字(0..9)</li><li>连字符(“-“)</li><li>下划线(“_”)  </li></ul><h3 id="形式引用符"><a href="#形式引用符" class="headerlink" title="形式引用符"></a>形式引用符</h3><p>Velocity假定$vicemaniac，（而不是$vice）是一个你想要使用的标识符。找不到$vicemaniac的值，他将返回$vicemaniac。使用形式符号便可解决这个问题<code>Jack is a $&#123;vice&#125;maniac</code> </p><h3 id="安静引用符"><a href="#安静引用符" class="headerlink" title="安静引用符"></a>安静引用符</h3><p>当表单初次装入时，变量引用$email无值，你宁愿是一个空白域而不是具有值”$email”。使用安静引用符可以绕过Velocity的常规行为，在VTL中不用$email而是用<code>$!email</code>符号。或与形式引用符一起使用例如：<code>$!&#123;email&#125;</code>  </p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>和java中使用方式是一样的，使用“\”标记，例如:“\$foo”输出对象是“$foo”   </p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>VTL引用的第二种元素是属性，而属性具有独特的格式。属性的简略标记识前导符$后跟一个VTL标识符，在后跟一个点号(“.”)最后又是一个VTL标识符。例如:<code>$customer.Address</code>  </p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法在JAVA代码中定义，并作一些有用的事情，比如运行一个计算器或者作出一个决定。方法是实际上也是引用，由前导符”$”后跟一个VTL标识符，后跟一个VTL方法体（Method Body）。例如:<code>page.setTitle(&quot;MyHomePage&quot;)</code></p><h2 id="指令-Directives"><a href="#指令-Directives" class="headerlink" title="指令(Directives)"></a>指令(Directives)</h2><p>常用的指令有：</p><ul><li>#set<br>赋值语句    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#set( $monkey = 123 ) </span><br><span class="line">#set( $value = $foo + 1 ) </span><br><span class="line">#set( $criteria = [&quot;name&quot;, &quot;address&quot;] )</span><br><span class="line">#set( $result = $query.criteria(&quot;name&quot;))</span><br></pre></td></tr></table></figure></li><li>#if / #elseif / #else     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#if($foo&lt;10)</span><br><span class="line">    &lt;strong&gt;Go North&lt;/strong&gt;</span><br><span class="line">#elseif($foo==10)</span><br><span class="line">    &lt;strong&gt;Go East&lt;/strong&gt;</span><br><span class="line">#else</span><br><span class="line">    &lt;strong&gt;Go West&lt;/strong&gt;</span><br><span class="line">#end</span><br></pre></td></tr></table></figure></li><li>#foreach   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#foreach($idx in [1..20]) </span><br><span class="line">    &lt;tr&gt; </span><br><span class="line">        &lt;td&gt;$velocityCount&lt;/td&gt; </span><br><span class="line">        &lt;td&gt;Now is $date.now()&lt;/td&gt; </span><br><span class="line">        #if($idx==10)</span><br><span class="line">            #break//跳出循环</span><br><span class="line">        #end</span><br><span class="line">    &lt;/tr&gt; </span><br><span class="line">#end </span><br><span class="line">#foreach( $customer in $customerList )</span><br><span class="line">    &lt;tr&gt;&lt;td&gt;$velocityCount&lt;/td&gt;&lt;td&gt;$customer.Name&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">#end</span><br></pre></td></tr></table></figure></li><li>#include<br>include脚本元素让模板设计者可以在模板中引入一个本地文件,这个被引入的文件将不会经过Velocity 的解析.安全起见，可以引放的文件只是是配置参数TEMPLATE_ROOT所定义目录下的，默认为当前目录下.  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include( &quot;one.txt&quot; )</span><br></pre></td></tr></table></figure>  多个文件或者用变量名代替：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include( &quot;greetings.txt&quot;, $seasonalstock )</span><br></pre></td></tr></table></figure></li><li>#parse<br>parse元素指示可以引入一个包含TVL的本地文件，这个文件将被Veloict engine 解析输出。<br>例如:<code>#parse( &quot;me.vm&quot; )</code><br>与#include 指令不同, #parse 可以从引入的模板中得到变量引用但#parse 指令只能接受一个参数<br>VTL templates 被#parse的模板中还可以再包含#parse声明， 默认的深度为10， 这是由配置参数directive.parse.max.depth在文件velocity.properties 中决定的，你可以修改它以适合项目要求。 </li><li><p>#evaluate<br>在运行时动态解析模板语言</p></li><li><p>#stop<br>指令停止模板引擎的执行并返回，这在Debug时很有用。 </p></li><li>#macro<br>宏调用,macro指令让模板设计者可以将些重复、相关的的脚本版断定义为一个功能块.  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#macro( tablerows $color $somelist )//申明一个名叫tablerows的宏命令，需要参数$color，$somelist</span><br><span class="line">#foreach( $something in $somelist )</span><br><span class="line">    &lt;tr&gt;&lt;td bgcolor=$color&gt;$something&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">#end</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>  然后，我们在页面中来使用：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#set( $greatlakes = [&quot;Superior&quot;,&quot;Michigan&quot;,&quot;Huron&quot;,&quot;Erie&quot;,&quot;Ontario&quot;] )</span><br><span class="line">#set( $color = &quot;blue&quot; )</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    #tablerows( $color $greatlakes )//调用宏命令</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>  输出结果：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td bgcolor=&quot;blue&quot;&gt;Superior&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td bgcolor=&quot;blue&quot;&gt;Michigan&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td bgcolor=&quot;blue&quot;&gt;Huron&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td bgcolor=&quot;blue&quot;&gt;Erie&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;&lt;td bgcolor=&quot;blue&quot;&gt;Ontario&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>  如果将宏#tablerows($color $list) 定义到一个模板库中(Velocimacros template library), 其它模板就都可以访问它了<h2 id="关于null"><a href="#关于null" class="headerlink" title="关于null"></a>关于null</h2>注意：如果右边的操作数是一个属性或命令的引用而返回null,那么赋值将不会成功，且在随后也不能再取出使用. 如下例:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#set( $result = $query.criteria(&quot;name&quot;))</span><br><span class="line">The result of the first query is $result</span><br><span class="line">#set( $result = $query.criteria(&quot;address&quot;))</span><br><span class="line">The result of the second query is $result</span><br></pre></td></tr></table></figure>如果$query.criteria(“name”) 返回的是字符串”bill”, 但$query.criteria(“address”) 返回null,上面的输出结果将是:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The result of the first query is bill</span><br><span class="line">The result of the second query is bill</span><br></pre></td></tr></table></figure>又如下例：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#set( $criteria = [&quot;name&quot;, &quot;address&quot;] )</span><br><span class="line">#foreach($criterion in $criteria )</span><br><span class="line">    #set($result=$query.criteria($criterion) )</span><br><span class="line">    #if($result)//错误，不能依赖if($result)来决定查询是否成功</span><br><span class="line">        Query was successful</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>在上例中，就不能依赖if($result)来决定查询是否成功. #set右边如果是null会 它将不能被赋其它值.一个解决办法是，每次都将$result设为false:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#set( $criteria = [&quot;name&quot;, &quot;address&quot;] )</span><br><span class="line">#foreach($criterion in $criteria )</span><br><span class="line">    #set($result = false)</span><br><span class="line">    #set($result=$query.criteria($criterion) )</span><br><span class="line">    #if($result)</span><br><span class="line">        Query was successful</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><a href="http://ifeve.com/apache-velocity-dev/">《Apache Velocity用户指南》官方文档 | 并发编程网 – ifeve.com</a><br><a href="http://www.cnblogs.com/fingerboy/p/6066303.html">Velocity初探小结–Velocity在spring中的配置和使用 - 醉眼识朦胧 - 博客园</a></li></ul>]]></content>
    
    <summary type="html">
    
      Velocity是一个基于java的模板引擎（template engine）。它允许任何人仅仅简单的使用模板语言（template language）来引用由java代码定义的对象。 当Velocity应用于web开发时，界面设计人员可以和java程序开发人员同步开发一个遵循MVC架构的web站点，也就是说，页面设计人员可以只 关注页面的显示效果，而由java程序开发人员关注业务逻辑编码。Velocity将java代码从web页面中分离出来，这样为web站点的长期维护提 供了便利，同时也为我们在JSP和PHP之外又提供了一种可选的方案。
    
    </summary>
    
      <category term="java" scheme="http://www.javacoder.fun/categories/java/"/>
    
    
      <category term="velocity" scheme="http://www.javacoder.fun/tags/velocity/"/>
    
  </entry>
  
  <entry>
    <title>URL中的特殊用途</title>
    <link href="http://www.javacoder.fun/2017/12/19/URL%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E7%94%A8%E9%80%94/"/>
    <id>http://www.javacoder.fun/2017/12/19/URL中的特殊用途/</id>
    <published>2017-12-19T14:05:16.630Z</published>
    <updated>2017-09-19T15:37:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="URL的用途"><a href="#URL的用途" class="headerlink" title="URL的用途"></a>URL的用途</h1><ol><li>导航  </li><li>传递参数</li><li>定位锚点</li><li>共享session</li></ol><h1 id="URL组成"><a href="#URL组成" class="headerlink" title="URL组成"></a>URL组成</h1><p>以下面这个URL为例，介绍下普通URL的各部分组成<br><a href="http://www.chenguangsong.online:80/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name">http://www.chenguangsong.online:80/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</a></p><ol><li>协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“//”为分隔符  </li><li>域名部分：该URL的域名部分为“<a href="http://www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用">www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用</a>  </li><li>端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口“80”  </li><li>虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”  </li><li>文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名  </li><li>锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分<br>7.参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。<br><a href="http://blog.csdn.net/ergouge/article/details/8185219">详解URL的组成 - CSDN博客</a>  </li></ol><h1 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h1><p>所谓导航就是指虚拟目录部分，用于在项目中去响应对应的方法，并返回页面，如果是普通的网页则直接访问对应目录下的网页</p><h1 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h1><p>在web系统中通过get方式传递参数,具体栗子 <code>?boardID=5&amp;ID=2461&amp;page=1</code></p><h1 id="定位锚点"><a href="#定位锚点" class="headerlink" title="定位锚点"></a>定位锚点</h1><p>锚点以<code>#</code>+DomID 接在url最后，打开后会浏览器会打开对应页面，并显示到id=DOMid的div或其他标签的位置，可以做到单页里面的导航也就是锚点，最常见的场景单页文档的目录响应场景<br><a href="http://www.cnblogs.com/tommy-huang/p/4468574.html">html锚点(mao dian)–特殊的超链接 - 一菲聪天 - 博客园</a>    </p><h1 id="共享session"><a href="#共享session" class="headerlink" title="共享session"></a>共享session</h1><p>用户登录系统会向服务器发送校验数据，服务器验证通过后会生成session，同时向客户端回传一个sessionid保存在用户的cookie中。<br>因为用户通过url访问服务器时并没有在url中传递用户信息，服务器就是通过sessionid来判断用户是否已经登录过，一般情况下浏览器会自动向服务器发送sessionid，但是cookie关闭，或跨窗口打开页面就会出现sessionid没有发送到服务器导致操作失败，这时我们就需要在url中拼接jsessionid<br><code>wapbrowse.jsp;jsessionid=5AC6268DD8D4D5D1FDF5D41E9F2FD960?curAlbumID=9</code><br>注意拼接jsessionid使用的是<code>;</code><br><a href="http://blog.csdn.net/chunqiuwei/article/details/23461995">jsessionid的简单说明 - CSDN博客</a><br><a href="http://sizhefang.iteye.com/blog/25294">url中的jsessionid解释 - sizhefang - ITeye博客</a>  </p>]]></content>
    
    <summary type="html">
    
      在开发B/S系统的时候肯定会用的url去调用对应的方法去获取页面及数据，那么url除了能导航，还能做什么呢？
    
    </summary>
    
      <category term="html" scheme="http://www.javacoder.fun/categories/html/"/>
    
    
      <category term="html" scheme="http://www.javacoder.fun/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记</title>
    <link href="http://www.javacoder.fun/2017/12/19/Redis/"/>
    <id>http://www.javacoder.fun/2017/12/19/Redis/</id>
    <published>2017-12-19T14:05:16.610Z</published>
    <updated>2017-10-28T15:20:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Radis简介"><a href="#Radis简介" class="headerlink" title="Radis简介"></a>Radis简介</h1><p>Radis支持存储的value类型很多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash （哈希类型）。<br>这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。<br>在此基础上，redis支持各种不同方式的排序。为了保证效率，数据都是缓存在内存中。同时redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。  </p><h1 id="Radis安装"><a href="#Radis安装" class="headerlink" title="Radis安装"></a>Radis安装</h1><p>另外，radis官方不支持windows，但是只是 Microsoft Open Tech group 在 GitHub上开发了一个Win64的版本,项目地址是：<a href="https://github.com/MSOpenTech/redis">https://github.com/MSOpenTech/redis</a>  （不是下载项目代码，而是下载release包）<br>具体参考：<a href="http://blog.csdn.net/renfufei/article/details/38474435">Windows下安装并设置Redis </a><br>service-install.bat服务安装脚本<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server.exe --service-install redis.windows.conf --loglevel verbose  </span><br></pre></td></tr></table></figure></p><p>uninstall-service.bat服务卸载脚本<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server --service-uninstall</span><br></pre></td></tr></table></figure></p><p>startup.bat启动radis服务端脚本<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf  </span><br></pre></td></tr></table></figure></p><p>启动后直接双击打开redis-cli.exe客户端，输入命令<code>ping</code><br>返回<code>PONG</code>则表面radis已经安装并启动完毕</p><h1 id="Radis常用命令"><a href="#Radis常用命令" class="headerlink" title="Radis常用命令"></a>Radis常用命令</h1><p>1、键值相关命令</p><ul><li>keys * 取出当前所有的key</li><li>exists name 查看n是否有name这个key</li><li>del name 删除key name</li><li>expire confirm 100 设置confirm这个key100秒过期</li><li>ttl confirm 获取confirm 这个key的有效时长</li><li>select 0 选择到0数据库 redis默认的数据库是0~15一共16个数据库</li><li>move confirm 1 将当前数据库中的key移动到其他的数据库中，这里就是把confire这个key从当前数据库中移动到1中</li><li>persist confirm 移除confirm这个key的过期时间</li><li>randomkey 随机返回数据库里面的一个key</li><li>rename key2 key3 重命名key2 为key3</li><li>type key2 返回key的数据类型</li></ul><p>2、服务器相关命令</p><ul><li>ping PONG返回响应是否连接成功</li><li>echo 在命令行打印一些内容</li><li>select 0~15 编号的数据库</li><li>quit  /exit 退出客户端</li><li>dbsize 返回当前数据库中所有key的数量</li><li>info 返回redis的相关信息</li><li>config get dir/* 实时传储收到的请求</li><li>flushdb 删除当前选择数据库中的所有key</li><li>flushall 删除所有数据库中的数据库</li><li>CONFIG SET requirepass secret_password设置密码，服务重启后失效</li><li>在配置文件中解开注释# requirepass foobared 并将foobared改为需要设置的密码  </li><li>auth password 认证登录</li><li>redis-cli -h host -p port -a password连接远程radis</li><li>save：将数据同步保存到磁盘</li><li>bgsave：将数据异步保存到磁盘</li><li>lastsave：返回上次成功将数据保存到磁盘的Unix时戳</li><li>shundown：将数据同步保存到磁盘，然后关闭服务</li></ul><p>3、对value操作的命令</p><ul><li>exists(key)：确认一个key是否存在</li><li>del(key)：删除一个key</li><li>type(key)：返回值的类型</li><li>keys(pattern)：返回满足给定pattern的所有key</li><li>randomkey：随机返回key空间的一个</li><li>keyrename(oldname, newname)：重命名key</li><li>dbsize：返回当前数据库中key的数目</li><li>expire：设定一个key的活动时间（s）</li><li>ttl：获得一个key的活动时间</li><li>move(key, dbindex)：移动当前数据库中的key到dbindex数据库</li></ul><p>全部命令请参考：<a href="http://doc.redisfans.com/">Redis 命令参考</a>、<a href="http://www.runoob.com/redis/redis-tutorial.html">Redis 教程 | 菜鸟教程</a></p><h1 id="在java中使用radis"><a href="#在java中使用radis" class="headerlink" title="在java中使用radis"></a>在java中使用radis</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line">public class RedisStringJava &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //连接本地的 Redis 服务</span><br><span class="line">        Jedis jedis = new Jedis(&quot;localhost&quot;);</span><br><span class="line">        System.out.println(&quot;连接成功&quot;);</span><br><span class="line">        //设置 redis 字符串数据</span><br><span class="line">        jedis.set(&quot;runoobkey&quot;, &quot;www.runoob.com&quot;);</span><br><span class="line">        // 获取存储的数据并输出</span><br><span class="line">        System.out.println(&quot;redis 存储的字符串为: &quot;+ jedis.get(&quot;runoobkey&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Redis是一个key-value存储系统，在部 分场合可以对关系数据库起到很好的补充作用。
    
    </summary>
    
      <category term="Radis" scheme="http://www.javacoder.fun/categories/Radis/"/>
    
    
      <category term="Radis" scheme="http://www.javacoder.fun/tags/Radis/"/>
    
  </entry>
  
  <entry>
    <title>Maven教程</title>
    <link href="http://www.javacoder.fun/2017/12/19/Maven%E6%95%99%E7%A8%8B/"/>
    <id>http://www.javacoder.fun/2017/12/19/Maven教程/</id>
    <published>2017-12-19T14:05:16.590Z</published>
    <updated>2017-08-20T13:04:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven的安装"><a href="#Maven的安装" class="headerlink" title="Maven的安装"></a>Maven的安装</h1><p><a href="http://www.yiibai.com/maven/maven_environment_setup.html">Maven安装配置 - Maven教程™</a><br>执行 mvn –version 在命令提示符,，如下图输出结果：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;mvn -version</span><br><span class="line">Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T19:57:3</span><br><span class="line">7+08:00)</span><br><span class="line">Maven home: D:\software\yiibai.com\apache-maven</span><br><span class="line">Java version: 1.8.0_40, vendor: Oracle Corporation</span><br><span class="line">Java home: D:\Program Files\Java\jdk1.8.0_40</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: &quot;windows 7&quot;, version: &quot;6.1&quot;, arch: &quot;amd64&quot;, family: &quot;dos&quot;</span><br></pre></td></tr></table></figure><br>证明Maven安装成功。<br>注意安装时注意maven的版本是64位就要对应java64位jdk，否则会安装失败。<br>安装完成后最好去修改一下apache-maven-3.0.4\conf\settings.xml文件<br>1、本地仓库位置<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;D:/works/repo&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure><br>2、配置私服<br><img src="http://oeb33qix3.bkt.clouddn.com/17-7-25/48407700.jpg" alt="私服示例图"><br>配置私服的优点</p><ul><li>节省外网宽带</li><li>加速Maven构建</li><li>部署第三方构件</li><li>提高稳定性、增强控制：原因是外网不稳定</li><li>降低中央仓库的负荷：原因是中央仓库访问量太大</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot; </span><br><span class="line">          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </span><br><span class="line">          xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;!-- 配置本地仓库位置，maven会下载jar包到此目录，默认为: ~/.m2/repository  --&gt;</span><br><span class="line">    &lt;localRepository&gt;D:/works/repo&lt;/localRepository&gt;</span><br><span class="line">    &lt;!-- 使用到的插件 --&gt;</span><br><span class="line">    &lt;pluginGroups&gt;</span><br><span class="line">    &lt;pluginGroup&gt;org.codehaus.cargo&lt;/pluginGroup&gt;</span><br><span class="line">    &lt;pluginGroup&gt;org.apache.maven.plugins&lt;/pluginGroup&gt; </span><br><span class="line">    &lt;pluginGroup&gt;org.codehaus.mojo&lt;/pluginGroup&gt;</span><br><span class="line">    &lt;/pluginGroups&gt;</span><br><span class="line">    &lt;servers&gt;</span><br><span class="line">        &lt;!-- nexus服务器登录密码 --&gt;</span><br><span class="line">    &lt;server&gt;</span><br><span class="line">          &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">          &lt;username&gt;xxxx&lt;/username&gt;</span><br><span class="line">          &lt;password&gt;xxxx&lt;/password&gt;</span><br><span class="line">       &lt;/server&gt;</span><br><span class="line">    &lt;/servers&gt;</span><br><span class="line">    &lt;mirrors&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">    &lt;!--拦截maven请求到指定仓库 --&gt;</span><br><span class="line">    &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">    &lt;url&gt;http://repos.xxxx.com:6060/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">    &lt;/mirrors&gt;</span><br><span class="line">    &lt;profiles&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">    &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">    &lt;!--配置jar包下载仓库 --&gt;</span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">    &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">    &lt;url&gt;http://repos.xxxx.com:6060/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">    &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;updatePolicy&gt;always&lt;/updatePolicy&gt;</span><br><span class="line">        &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;&lt;/releases&gt;</span><br><span class="line">    &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;updatePolicy&gt;always&lt;/updatePolicy&gt;</span><br><span class="line">        &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;&lt;/snapshots&gt;</span><br><span class="line">    &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line">    &lt;!--配置plugin包下载仓库 --&gt;</span><br><span class="line">    &lt;pluginRepositories&gt;</span><br><span class="line">    &lt;pluginRepository&gt;</span><br><span class="line">    &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">    &lt;url&gt;http://repos.xxxx.com:6060/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">    &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;updatePolicy&gt;always&lt;/updatePolicy&gt;</span><br><span class="line">        &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;&lt;/releases&gt;</span><br><span class="line">    &lt;snapshots&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;updatePolicy&gt;always&lt;/updatePolicy&gt;</span><br><span class="line">        &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;&lt;/snapshots&gt;</span><br><span class="line">    &lt;/pluginRepository&gt;</span><br><span class="line">    &lt;/pluginRepositories&gt;</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">    &lt;!-- 代码质量管理的一个插件，具体这里不详述  --&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">       &lt;id&gt;sonar&lt;/id&gt;</span><br><span class="line">       &lt;activation&gt;</span><br><span class="line">       &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">       &lt;/activation&gt;</span><br><span class="line">       &lt;properties&gt;</span><br><span class="line">    &lt;sonar.jdbc.url&gt;</span><br><span class="line">     jdbc:mysql://127.0.0.1:3306/sonar?useUnicode=true&amp;amp;characterEncoding=utf8</span><br><span class="line">       &lt;/sonar.jdbc.url&gt;</span><br><span class="line">       &lt;sonar.jdbc.driver&gt;com.mysql.jdbc.Driver&lt;/sonar.jdbc.driver&gt;</span><br><span class="line">       &lt;sonar.jdbc.username&gt;xxxx&lt;/sonar.jdbc.username&gt;</span><br><span class="line">       &lt;sonar.jdbc.password&gt;xxxx&lt;/sonar.jdbc.password&gt;</span><br><span class="line">       &lt;sonar.host.url&gt;http://127.0.0.1:9000/sonar&lt;/sonar.host.url&gt;</span><br><span class="line">       &lt;/properties&gt;</span><br><span class="line">       &lt;/profile&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;/profiles&gt;</span><br><span class="line">&lt;activeProfiles&gt;</span><br><span class="line">&lt;!-- 启用私服 --&gt;</span><br><span class="line">&lt;activeProfile&gt;nexus&lt;/activeProfile&gt;</span><br><span class="line">&lt;/activeProfiles&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><h1 id="Maven添加远程仓库"><a href="#Maven添加远程仓库" class="headerlink" title="Maven添加远程仓库"></a>Maven添加远程仓库</h1><p>在项目的pom.xml中配置远程仓库<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;project ...&gt;</span><br><span class="line">&lt;repositories&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">      &lt;id&gt;java.net&lt;/id&gt;</span><br><span class="line">      &lt;url&gt;https://maven.java.net/content/repositories/public/&lt;/url&gt;</span><br><span class="line">    &lt;/repository&gt;</span><br><span class="line"> &lt;/repositories&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><h1 id="Maven依赖库查询规则"><a href="#Maven依赖库查询规则" class="headerlink" title="Maven依赖库查询规则"></a>Maven依赖库查询规则</h1><ul><li>在Maven本地资源库中搜索，如果没有找到，进入第 2 步，否则退出。</li><li>在Maven中央存储库(或私服)搜索，如果没有找到，进入第 3 步，否则退出。</li><li>在项目pom文件中配置的Maven的远程存储库搜索，如果没有找到，提示错误信息，否则退出。  <h1 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//按maven-archetype-quickstart模板创建java项目</span><br><span class="line">mvn archetype:generate -DgroupId=&#123;项目包名&#125; -DartifactId=&#123;项目名&#125;  -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false  </span><br><span class="line">//构建成eclipse项目（在项目目录下执行）</span><br><span class="line">mvn eclipse:eclipse</span><br><span class="line">//打包项目</span><br><span class="line">mvn package</span><br><span class="line">//清理打包</span><br><span class="line">mvn clean</span><br><span class="line">//查看当前项目jar包依赖树</span><br><span class="line">mvn dependency:tree</span><br><span class="line"></span><br><span class="line">//按maven-archetype-webapp模板创建web项目</span><br><span class="line">mvn archetype:generate -DgroupId=&#123;项目包名&#125; -DartifactId=&#123;项目名&#125;  -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false</span><br><span class="line">mvn eclipse:eclipse -Dwtpversion=2.0//选项 -Dwtpversion=2.0 告诉 Maven 将项目转换到 Eclipse 的 Web 项目(WAR)，而不是默认的Java项目(JAR)。  </span><br><span class="line">mvn tomcat:run</span><br><span class="line">//maven生成项目文档</span><br><span class="line">mvn site</span><br><span class="line">//Maven构建项目到本地仓库</span><br><span class="line">mvn install</span><br><span class="line">//Maven执行单元测试</span><br><span class="line">mvn test</span><br></pre></td></tr></table></figure><h1 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h1>pom文件中配置依赖是可以通过<code>&lt;parent&gt;</code>标签继承一个项目的jar包，但是我们可以在当前pom文件中替换的parent项目中的部分jar配置。<br>当pom文件中有同名的jar，<strong>项目选择jar包的顺序</strong>是：<br><strong>优先选择pom文件中上面的jar，优先选择当前pom中配置的jar，次选parent中的jar</strong>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Inherit defaults from Spring Boot --&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.1.BUILD-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; </span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0  http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;groupId&gt;com.yiibai&lt;/groupId&gt;&lt;!-- 包名 --&gt;</span><br><span class="line">&lt;artifactId&gt;CounterWebApp&lt;/artifactId&gt;&lt;!-- 项目名 --&gt;</span><br><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;&lt;!-- 打包类型 --&gt;</span><br><span class="line">&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;!-- 项目版本 --&gt;</span><br><span class="line">&lt;name&gt;CounterWebApp Maven Webapp&lt;/name&gt;&lt;!-- 项目名称 --&gt;</span><br><span class="line">&lt;url&gt;http://maven.apache.org&lt;/url&gt; &lt;!-- 项目地址 --&gt;</span><br><span class="line">&lt;!-- 配置参数，用于集中管理jar包的版本  --&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;jdk.version&gt;1.7&lt;/jdk.version&gt;</span><br><span class="line">&lt;spring.version&gt;4.1.1.RELEASE&lt;/spring.version&gt;</span><br><span class="line">&lt;jstl.version&gt;1.2&lt;/jstl.version&gt;</span><br><span class="line">&lt;junit.version&gt;4.11&lt;/junit.version&gt;</span><br><span class="line">&lt;logback.version&gt;1.0.13&lt;/logback.version&gt;</span><br><span class="line">&lt;jcl-over-slf4j.version&gt;1.7.5&lt;/jcl-over-slf4j.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;!-- Unit Test --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Spring Core --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;commons-logging&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-logging&lt;/artifactId&gt;</span><br><span class="line">&lt;/exclusion&gt;</span><br><span class="line">&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;jcl-over-slf4j.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;logback.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- jstl --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;jstl&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;jstl.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;systemPath&gt;$&#123;basedir&#125;\src\lib\jstl.jar&lt;/systemPath&gt;&lt;!-- 添加外部以来jar包，通过指定路径来获得 --&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;finalName&gt;CounterWebApp&lt;/finalName&gt;</span><br><span class="line"></span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">    &lt;!-- 告诉eclipse此项目为web项目，在构建eclipse项目时不用再加 -Dwtpversion=2.0 参数了 --&gt;</span><br><span class="line">  &lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven-eclipse-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.9&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;!-- Always download and attach dependencies source code --&gt;</span><br><span class="line">&lt;downloadSources&gt;true&lt;/downloadSources&gt;</span><br><span class="line">&lt;downloadJavadocs&gt;false&lt;/downloadJavadocs&gt;</span><br><span class="line">&lt;!-- Avoid type mvn eclipse:eclipse -Dwtpversion=2.0 --&gt;</span><br><span class="line">&lt;wtpversion&gt;2.0&lt;/wtpversion&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">  &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 配置jdk版本 --&gt;</span><br><span class="line">  &lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.3.2&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;source&gt;$&#123;jdk.version&#125;&lt;/source&gt;</span><br><span class="line">&lt;target&gt;$&#123;jdk.version&#125;&lt;/target&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">  &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 配置tomcat版本 --&gt;</span><br><span class="line">  &lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;path&gt;/CounterWebApp&lt;/path&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">  &lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line">&lt;repositories&gt;&lt;!-- 配置额外的远程仓库 --&gt;</span><br><span class="line">      &lt;repository&gt;</span><br><span class="line">         &lt;id&gt;companyname.lib1&lt;/id&gt;</span><br><span class="line">         &lt;url&gt;http://download.companyname.org/maven2/lib1&lt;/url&gt;</span><br><span class="line">      &lt;/repository&gt;</span><br><span class="line">      &lt;repository&gt;</span><br><span class="line">         &lt;id&gt;companyname.lib2&lt;/id&gt;</span><br><span class="line">         &lt;url&gt;http://download.companyname.org/maven2/lib2&lt;/url&gt;</span><br><span class="line">      &lt;/repository&gt;</span><br><span class="line">   &lt;/repositories&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h1 id="什么是快照？"><a href="#什么是快照？" class="headerlink" title="什么是快照？"></a>什么是快照？</h1><p>快照（SNAPSHOT ）是一个特殊版本，指出目前开发拷贝。不同于常规版本，Maven 每生成一个远程存储库都会检查新的快照版本。  </p><h1 id="持续构建工具"><a href="#持续构建工具" class="headerlink" title="持续构建工具"></a>持续构建工具</h1><p>Jenkins、Hudson。可以用于在svn、git更新代后利用maven构建项目 并发布项目，达到持续发布的效果，同时也可以通过定时任务调度执行python脚本，进行其他自动化操作，此处不详述之后有空在写一篇吧</p><h1 id="Eclipse中使用Maven"><a href="#Eclipse中使用Maven" class="headerlink" title="Eclipse中使用Maven"></a>Eclipse中使用Maven</h1><p><a href="http://www.yiibai.com/maven/m2eclipse-project.html">Eclipse构建Maven项目 - Maven教程™</a>  </p><h1 id="发布项目到tomcat中"><a href="#发布项目到tomcat中" class="headerlink" title="发布项目到tomcat中"></a>发布项目到tomcat中</h1><p><a href="http://www.yiibai.com/maven/deploy-maven-based-war-file-to-tomcat.html">部署基于Maven的war文件到Tomcat</a>  </p><h1 id="Maven运行build报错"><a href="#Maven运行build报错" class="headerlink" title="Maven运行build报错"></a>Maven运行build报错</h1><p>解决方案:<a href="http://blog.sina.com.cn/s/blog_65e13da00100n5ea.html">MavenBuildError系统资源不足<em>happybaby</em>新浪博客</a><br><a href="http://www.cnblogs.com/zhouyalei/p/3338139.html">maven install时报错Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile - 周雷 - 博客园</a>  </p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="http://www.yiibai.com/maven/">Maven教程™——易百教程</a><br><a href="http://maven.apache.org/index.html">Maven – Welcome to Apache Maven</a><br><a href="http://blog.csdn.net/hunterno4/article/details/11687269">SonarQube代码质量管理平台安装与使用 - hunterno4的专栏 - CSDN博客</a><br><a href="http://blog.csdn.net/tayanxunhua/article/details/19068725">Maven与Sonar配合使用 - 踏雁寻花 - CSDN博客</a>  </p>]]></content>
    
    <summary type="html">
    
      Maven是一个项目管理和综合工具。Maven提供了开发人员构建一个完整的生命周期框架。开发团队可以自动完成项目的基础工具建设，Maven使用标准的目录结构和默认构建生命周期。
    
    </summary>
    
      <category term="java" scheme="http://www.javacoder.fun/categories/java/"/>
    
    
      <category term="Maven" scheme="http://www.javacoder.fun/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>linux学习（1）——sh脚本</title>
    <link href="http://www.javacoder.fun/2017/12/19/linux%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94sh%E8%84%9A%E6%9C%AC/"/>
    <id>http://www.javacoder.fun/2017/12/19/linux学习（1）——sh脚本/</id>
    <published>2017-12-19T14:05:16.570Z</published>
    <updated>2017-05-25T05:38:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录常用的shell命令"><a href="#记录常用的shell命令" class="headerlink" title="记录常用的shell命令"></a>记录常用的shell命令</h1><ul><li><p>grep查询语句</p><ul><li>grep -rn “keyword”查找keyword</li><li>grep -rin “keyword”查找keyword，并忽略大小写</li></ul></li><li><p>rm删除语句</p><ul><li>rm -f filename</li><li>rmdir dirname</li><li>rm -rf dirname/filename 删除文件，或删除文件夹及文件夹中的文件</li></ul></li><li><p>mkdir创建文件夹</p><ul><li>mkdir -p dirname/dirname 连续创建多级目录</li><li>mkdir -m 777 test3 创建对应权限的文件夹</li><li>mkdir -v test4 创建并显示文件夹信息</li></ul></li><li><p>chmod修改文件权限</p><ul><li>chmod 777 filename 设置filename文件的所有权限全部开放</li></ul></li><li><p>cd</p><ul><li>cd - 返回前一次的目录</li><li>cd ~ 返回home目录</li></ul></li><li><p>pwd 输出当前目录</p></li><li><p>echo 控制台输出</p></li><li><p>sleep 5s 进程休眠5秒</p></li><li><p>exit 退出当前进程</p></li><li><p>diff 比较不同</p></li><li><p>printf 类似C语言中的 </p><ul><li>printf ‘%d %s\n’ 1 “abc” 输出数字1和字符串abc并回车</li></ul></li><li><p>read flag 读取控制台输入赋值给flag</p></li><li><p>`` 表示运行输出进行赋值</p><ul><li>current_path=`pwd`</li><li>result = `expr $a + $b`</li></ul></li><li><p>let与expr</p><ul><li>let x=5+6</li><li>let x=$x+1</li><li>let not found原因  /bin/sh指向了dash而不是bash，dash不支持let命令。</li><li>x=`expr 5+6` </li><li>expr运算符注意:符号和参数之间要有空格分开；通配符号(*),在作为乘法运算符时要用\、“”、‘’符号修饰</li></ul></li><li><p>`ps -ef | grep -E “xxx.sh” | grep -v “grep” | grep -v “$$” | wc -l`</p><ul><li>ps -rf 查看正在活动的进程列表</li></ul></li><li><p>find dirpath -type f | wc -l</p><ul><li><a href="http://www.cnblogs.com/wanqieddy/archive/2011/06/09/2076785.html">Linux find 用法示例 - wanqi - 博客园</a></li></ul></li><li><p>du -ah filepath</p><ul><li>显示文件大小</li></ul></li><li><p>bash xxx.sh  执行xxx.sh脚本</p></li><li><p>spawn、expect自动交互 </p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/expect   </span><br><span class="line">    　　set timeout 30                                      //  设置超时时间</span><br><span class="line">    　　spawn ssh -l username 192.168.1.1                   //  通过spawn执行ssh语句</span><br><span class="line">    　　expect &quot;password:&quot;                                  //  开始检查终端输出“password:”</span><br><span class="line">    　　send &quot;ispass\r&quot;                                     //  自动向终端发送 “ispass” 并回车</span><br><span class="line">    　　interact                                            //  交还终端控制权</span><br></pre></td></tr></table></figure></li><li><p>mv移动</p><ul><li>mv dir1 new_dir 重命名/移动 一个目录</li></ul></li><li><p>tar解压</p><ul><li>tar –xvf file.tar 解压 tar包</li><li>tar -xzvf file.tar.gz 解压tar.gz</li><li>tar -xjvf file.tar.bz2   解压 tar.bz2tar –xZvf file.tar.Z 解压tar.Z</li><li>tar zxvf jdk-8u73-linux-x64.gz -C /usr/java/jdk 解压文件jdk-8u73-linux-x64.gz到目录/usr/java/jdk  </li><li><a href="http://www.cnblogs.com/jyaray/archive/2011/04/30/2033362.html">tar压缩解压缩命令详解 - jyaray - 博客园</a></li></ul></li><li><p>wget下载</p><ul><li>wget <a href="http://www.linuxsense.org/xxxx/xxx.tar.gz">http://www.linuxsense.org/xxxx/xxx.tar.gz</a> 通过url下载文件</li></ul></li><li><p>apt-get 安装管理</p><ul><li>apt-get update 定期运行这一命令以确保您的软件包列表是最新的</li><li>apt-get install packagename 安装一个新软件</li><li>apt-get autoremove –purge packagname 删除包及其依赖的软件包+配置文件</li></ul></li><li><p>sed<br><a href="http://www.cnblogs.com/dong008259/archive/2011/12/07/2279897.html">linux之sed用法 - 东方雨中漫步者 - 博客园</a>  </p></li><li>cat<br><a href="http://www.cnblogs.com/perfy/archive/2012/07/23/2605550.html">linux下cat命令详解 - 路人浅笑 - 博客园</a></li></ul><p><a href="http://www.cnblogs.com/fnlingnzb-learner/p/5831284.html">Linux常用命令大全</a>  </p><h1 id="shell脚本语法"><a href="#shell脚本语法" class="headerlink" title="shell脚本语法"></a>shell脚本语法</h1><ul><li>#!/bin/sh<br>  符号#!用来告诉系统它后面的参数是用来执行该文件的程序。注意文件必须是unix格式的，如果不是系统会将脚本当成一串命令而不是在一个线程中执行</li><li>if<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if [ -e file ] || [ &quot;x$flag&quot; = &quot;xyes&quot; ] ; then    //判断字符串相等用1个“=”而不是2个</span><br><span class="line">    echo yes</span><br><span class="line">elif [ &quot;x$flag&quot; = &quot;xno&quot; ] ;then</span><br><span class="line">    echo no</span><br><span class="line">else</span><br><span class="line">    echo other</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li>while<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">while :     //无限循环 或者while true </span><br><span class="line">do</span><br><span class="line">echo &quot;是否继续执行?（yes/no）&quot;</span><br><span class="line">read flag</span><br><span class="line">if [ &quot;x$flag&quot; = &quot;xyes&quot; ]; then</span><br><span class="line">echo &quot;跳出循环，继续执行&quot;</span><br><span class="line">break</span><br><span class="line">elif [ &quot;x$flag&quot; = &quot;xno&quot; ]; then</span><br><span class="line">echo &quot;停止执行，结束程序&quot;</span><br><span class="line">exit 0</span><br><span class="line">else</span><br><span class="line">continue</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li>for    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">for file in `ls`</span><br><span class="line">    do</span><br><span class="line">        echo file</span><br><span class="line">    done</span><br><span class="line">    </span><br><span class="line">for var in 1 2 3 4</span><br><span class="line">    do</span><br><span class="line">        echo var</span><br><span class="line">    done</span><br><span class="line">    </span><br><span class="line">for (( ; ; ))</span><br></pre></td></tr></table></figure></li><li>case  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;输入 1 到 4 之间的数字:&#x27;</span><br><span class="line">echo &#x27;你输入的数字为:&#x27;</span><br><span class="line">read aNum</span><br><span class="line">case $aNum in</span><br><span class="line">    1)  echo &#x27;你选择了 1&#x27;</span><br><span class="line">    ;;</span><br><span class="line">    2)  echo &#x27;你选择了 2&#x27;</span><br><span class="line">    ;;</span><br><span class="line">    3)  echo &#x27;你选择了 3&#x27;</span><br><span class="line">    ;;</span><br><span class="line">    4)  echo &#x27;你选择了 4&#x27;</span><br><span class="line">    ;;</span><br><span class="line">    *)  echo &#x27;你没有输入 1 到 4 之间的数字&#x27;</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li><li>关系运算符<br>  |运算 | 说明 | 举例 |<br>  |:—|:—|:—|<br>  |-eq    |检测两个数是否相等，相等返回 true。                          |[ $a -eq $b ] |<br>  |-ne    |检测两个数是否相等，不相等返回 true。                          |[ $a -ne $b ] |<br>  |-gt    |检测左边的数是否大于右边的，如果是，则返回 true。              |[ $a -gt $b ] |<br>  |-lt    |检测左边的数是否小于右边的，如果是，则返回 true。              |[ $a -lt $b ] |<br>  |-ge    |检测左边的数是否大于等于右边的，如果是，则返回 true。          |[ $a -ge $b ] |<br>  |-le    |检测左边的数是否小于等于右边的，如果是，则返回 true。          |[ $a -le $b ] |</li><li>文件测试运算符<br>  |运算 | 说明 | 举例 |<br>  |:—|:—|:—|<br>  |-b file    |检测文件是否是块设备文件，如果是，则返回 true。                            |[ -b $file ]<br>  |-c file    |检测文件是否是字符设备文件，如果是，则返回 true。                            |[ -c $file ]<br>  |-d file    |检测文件是否是目录，如果是，则返回 true。                                    |[ -d $file ]<br>  |-f file    |检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。|[ -f $file ]<br>  |-g file    |检测文件是否设置了 SGID 位，如果是，则返回 true。                            |[ -g $file ]<br>  |-k file    |检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。                |[ -k $file ]<br>  |-p file    |检测文件是否是有名管道，如果是，则返回 true。                                |[ -p $file ]<br>  |-u file    |检测文件是否设置了 SUID 位，如果是，则返回 true。                            |[ -u $file ]<br>  |-r file    |检测文件是否可读，如果是，则返回 true。                                    |[ -r $file ]<br>  |-w file    |检测文件是否可写，如果是，则返回 true。                                    |[ -w $file ]<br>  |-x file    |检测文件是否可执行，如果是，则返回 true。                                    |[ -x $file ]<br>  |-s file    |检测文件是否为空（文件大小是否大于0），不为空返回 true。                    |[ -s $file ]<br>  |-e file    |检测文件（包括目录）是否存在，如果是，则返回 true。                        |[ -e $file ] </li><li>执行命令传递参数<ul><li>echo “执行的文件名：$0”;</li><li>echo “第一个参数为：$1”;</li><li>echo “第二个参数为：$2”;</li></ul></li><li><p>函数<br>  定义函数、及调用  </p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">demoFun()&#123;                                   //函数定义类似C语言</span><br><span class="line">    echo &quot;这是我的第一个 shell 函数!&quot;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;-----函数开始执行-----&quot;</span><br><span class="line">demoFun                                      //调用是不要写（）</span><br><span class="line">echo &quot;-----函数执行完毕-----&quot;</span><br></pre></td></tr></table></figure><p>  函数传递参数的方式<br>  执行test.sh脚本</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">echo 脚本参数\$0=$0</span><br><span class="line">echo 脚本参数\$1=$1</span><br><span class="line">echo 脚本参数个数\$\#=$#</span><br><span class="line">myfun()&#123;</span><br><span class="line">    echo 函数myfun中参数\$0=$0</span><br><span class="line">    echo 函数myfun中参数\$1=$1</span><br><span class="line">    echo 函数myfun中参数个数\$\#=$#</span><br><span class="line">&#125;</span><br><span class="line">myfun 999</span><br></pre></td></tr></table></figure><p>  执行脚本<code>./test.sh 111 222 333</code><br>  运行结果为</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">脚本参数\$0=./test.sh</span><br><span class="line">脚本参数\$1=111</span><br><span class="line">脚本参数个数\$\#=3</span><br><span class="line">函数myfun中参数\$0=./test.sh</span><br><span class="line">函数myfun中参数\$1=999</span><br><span class="line">函数myfun中参数个数\$\#=1</span><br></pre></td></tr></table></figure><p>  $10 不能获取第十个参数，获取第十个参数需要${10}。当n&gt;=10时，需要使用${n}来获取参数。</p></li><li><p><a href="http://www.runoob.com/linux/linux-shell-variable.html">Shell 教程 | 菜鸟教程</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      在linux环境下工作一定会用到shell脚本，来帮助我们执行一些操作来提高我们的工作效率，进行一些简单的机械化的操作，解放自己。
    
    </summary>
    
      <category term="linux" scheme="http://www.javacoder.fun/categories/linux/"/>
    
    
      <category term="shell,linux" scheme="http://www.javacoder.fun/tags/shell-linux/"/>
    
  </entry>
  
  <entry>
    <title>linux学习——命令行颜色配置及环境变量配置</title>
    <link href="http://www.javacoder.fun/2017/12/19/linux%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%A2%9C%E8%89%B2%E9%85%8D%E7%BD%AE%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.javacoder.fun/2017/12/19/linux学习——命令行颜色配置及环境变量配置/</id>
    <published>2017-12-19T14:05:16.560Z</published>
    <updated>2017-03-16T14:59:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><ul><li>编辑更目录下的.bashrc文件配置颜色显示方案</li><li>启用颜色配置方案</li></ul><h1 id="编辑配色方案"><a href="#编辑配色方案" class="headerlink" title="编辑配色方案"></a>编辑配色方案</h1><p><a href="http://www.cnblogs.com/menlsh/archive/2012/08/27/2659101.html">修改linux终端命令行颜色</a></p><h1 id="启用配色方案"><a href="#启用配色方案" class="headerlink" title="启用配色方案"></a>启用配色方案</h1><p>编辑完成后即可执行<code>source ~/.bashrc</code>启用配色方案，但是一旦你退出命令行之后颜色方案又没有被启用，这时肯定是没有将配色方案放到环境变量中去，需要在<code>~/.bash_profile</code>中配置，如下：</p><pre><code>if [ -f ~/.bashrc ]; then  . ~/.bashrc  fi  </code></pre><p>参考：<a href="http://www.2cto.com/os/201305/213759.html">.bashrc设置后无效解决</a></p><h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><p>/etc/profile，/etc/bashrc 是系统全局环境变量设定<br>~/.profile可以设定本用户专有的路径，环境变量，等，它只能登入的时候执行一次<br>~/.bashrc也是某用户专有设定文档，可以设定路径，命令别名  </p><h2 id="添加目录到环境变量中"><a href="#添加目录到环境变量中" class="headerlink" title="添加目录到环境变量中"></a>添加目录到环境变量中</h2><p>在<code>~/.bashrc或~/.profile</code>中加入如下代码  </p><pre><code>PATH=~/private_shll:$PATH</code></pre>]]></content>
    
    <summary type="html">
    
      在linux使用过程中一定会使用到命令行，合理配置命令行中的字符颜色显示对于日常使用十分重要，一个好看的界面还是很重要的，嘿嘿!
    
    </summary>
    
      <category term="linux" scheme="http://www.javacoder.fun/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.javacoder.fun/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Java学习笔记（2）——freemarker</title>
    <link href="http://www.javacoder.fun/2017/12/19/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94freemarker/"/>
    <id>http://www.javacoder.fun/2017/12/19/Java学习笔记（2）——freemarker/</id>
    <published>2017-12-19T14:05:16.540Z</published>
    <updated>2017-09-18T13:12:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>要使用freemarker作为项目的表现层模板引擎，需要导入jar包 <a href="https://mvnrepository.com/search?q=freemarker">freemarker.x.x.x.jar</a>  </p><h1 id="FreeMarker模板文件"><a href="#FreeMarker模板文件" class="headerlink" title="FreeMarker模板文件"></a>FreeMarker模板文件</h1><p>FreeMarker模板文件主要由如下4个部分组成:   </p><ul><li>文本:直接输出的部分  </li><li>注释:&lt;#– … –&gt;格式部分,不会输出  </li><li>插值:即${…}或#{…}格式的部分,将使用数据模型中的部分替代输出  </li><li>FTL指令:FreeMarker指定,和HTML标记类似,名字前加#予以区分,不会输出  </li></ul><h1 id="构建模板"><a href="#构建模板" class="headerlink" title="构建模板"></a>构建模板</h1><p>在一个项目中你需要为你使用到的页面构建一个通用的模板，这样其他页面可以通过模板构建避免很多重复的代码，提高程序可复用性。需求更改时只需要在一处修改，程序整体更加统一。  </p><h1 id="FTL标签"><a href="#FTL标签" class="headerlink" title="FTL标签"></a>FTL标签</h1><p>插值规则<br>FreeMarker的插值有如下两种类型<br>1、通用插值：${expr}<br>2、数字格式化插值：#{expr}或者#{expr;format}  </p><p>通用插值，有可以分为四种情况<br>a、插值结果为字符串值：直接输出表达式结果<br>b、插值结果为数字值：根据默认格式(#setting 指令设置)将表达式结果转换成文本输出。可以使用内建的字符串函数格式单个插值，例如<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;#setting number_format = &quot;currency&quot; /&gt;</span><br><span class="line">&lt;#assign price = 42 /&gt;</span><br><span class="line">$&#123;price&#125;</span><br><span class="line">$&#123;price?string&#125;</span><br><span class="line">$&#123;price?string.number&#125;</span><br><span class="line">$&#123;price?string.currency&#125;</span><br><span class="line">$&#123;price?string.percent&#125;</span><br></pre></td></tr></table></figure><br>c、输出值为日期值：根据默认格式(由 #setting 指令设置)将表达式结果转换成文本输出，可以使用内建的字符串函数格式化单个插值，例如<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign lastUpdated = &quot;2009-01-07 15:05&quot;?datetime(&quot;yyyy-MM-dd HH:mm&quot;) /&gt;</span><br><span class="line">$&#123;lastUpdated?string(&quot;yyyy-MM-dd HH:mm:ss zzzz&quot;)&#125;;</span><br><span class="line">$&#123;lastUpdated?string(&quot;EEE,MMM d,yy&quot;)&#125;;</span><br><span class="line">$&#123;lastUpdated?string(&quot;EEEE,MMMM dd,yyyy,hh:mm:ss a &#x27;(&#x27;zzz&#x27;)&#x27;&quot;)&#125;;</span><br><span class="line">$&#123;lastUpdated?string.short&#125;;</span><br><span class="line">$&#123;lastUpdated?string.long&#125;;</span><br><span class="line">$&#123;lastUpdated?String.full&#125;;</span><br></pre></td></tr></table></figure><br>d、插值结果为布尔值<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign foo=true /&gt;</span><br><span class="line">$&#123;foo?string(&quot;是foo&quot;,&quot;非foo&quot;)&#125;</span><br></pre></td></tr></table></figure></p><p>数字格式化插值<br> 数字格式化插值可采用#{expr;format}的形式来格式化数字，其中format可以是：<br> mX:小数部分最小X位<br> MX:小数部分最大X位<br> 例如：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign x = 2.582 /&gt;</span><br><span class="line">&lt;#assign y =4 /&gt;</span><br><span class="line">#&#123;x;M2&#125;;</span><br><span class="line">#&#123;y;M2&#125;;</span><br><span class="line">#&#123;x;m1&#125;;</span><br><span class="line">#&#123;y;m1&#125;;</span><br><span class="line">#&#123;x;m1M2&#125;;</span><br><span class="line">#&#123;y:m1M2&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><ul><li>部分指令示例<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;#list [&quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;, &quot;星期天&quot;] as x&gt;    &lt;#-- 遍历列表 --&gt;</span><br><span class="line">    $&#123;x_index + 1&#125;.$&#123;x&#125;                                                            &lt;#-- $&#123;x_index + 1&#125;代表序号 --&gt;</span><br><span class="line">    &lt;#if x_has_next&gt;                                                               &lt;#-- $&#123;x_has_next&#125;判断是否遍历结束 --&gt;</span><br><span class="line">        ,</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;#if x=&quot;星期四&quot;&gt;</span><br><span class="line">        &lt;#break&gt;                                                                   &lt;#-- 跳出循环 --&gt;</span><br><span class="line">    &lt;/#if&gt;</span><br><span class="line">&lt;/#list&gt;</span><br></pre></td></tr></table></figure></li><li>&lt;#noparse&gt; 此标签包含的内容不进行freemarker语法解析  </li><li>&lt;#escape identifier as expression&gt;…</li><li>&lt;#assign x&gt;申明一个/多个变量,并为变量赋值</li><li>&lt;#import “/lib/common.ftl” as com&gt; 导入ftl文件中的变量及方法</li><li>&lt;#macro name param1 param2 … paramN&gt;宏定义  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在macro中定义参数要放在macro变量后面，如：  </span><br><span class="line">&lt;#macro greet person&gt;</span><br><span class="line">    &lt;font  size=’+2’&gt;Hello $&#123;person&#125;&lt;/font&gt;</span><br><span class="line">&lt;/#macro&gt;</span><br><span class="line">在使用的时候：</span><br><span class="line">&lt;@greet person=’Fred’/&gt; and &lt;@greet person=’Batman’/&gt;</span><br></pre></td></tr></table></figure></li><li><p>&lt;#nested loopvar1, loopvar2, …, loopvarN&gt;宏嵌套<br>  <a href="http://www.cnblogs.com/xx0405/p/6646213.html">freemarker 宏嵌套nested 的使用 - 小小小飞鱼 - 博客园</a></p></li><li><p>&lt;#return&gt;return指令:该指令可用于随时结束该自定义宏指令.</p></li></ul><h2 id="判断条件”-gt-”和”-lt-”与标签括号冲突解决方案"><a href="#判断条件”-gt-”和”-lt-”与标签括号冲突解决方案" class="headerlink" title="判断条件”&gt;”和”&lt;”与标签括号冲突解决方案"></a>判断条件”&gt;”和”&lt;”与标签括号冲突解决方案</h2><ul><li>用符号代替，&gt; gt, &gt;=  gte ,&lt; lt , &lt;= lte</li><li>加括号 &lt;#if(x&gt;y)&gt;  </li></ul><h2 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h2><ul><li>!:指定缺失变量的默认值,variable!或variable!defaultValue,第一种用法不给缺失的变量指定默认值,表明默认值是空字符串    </li><li>??:判断某个变量是否存在，<code>variable??</code>,如果该变量存在,返回true,否则返回false<h2 id="格式化输出数据"><a href="#格式化输出数据" class="headerlink" title="格式化输出数据"></a>格式化输出数据</h2>1,通用插值${expr};<br>2,数字格式化插值:#{expr}或#{expr;format}<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2>在<code>$&#123;&#125;</code>中输出文本时遇到特殊字符要进行转义如：双引号<code>\&quot;</code>,但是如果在一个插值语句中有很多字符需要转义可以<code>$&#123;r其他内容&#125;</code>  </li></ul><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="hhttp://blog.csdn.net/chenghui0317/article/details/7832474">Freemarker实例教程 - 永恒の_☆ - CSDN博客</a><br><a href="http://demojava.iteye.com/blog/800204">Freemarker 使用 - 只有准备爆发，才会甘于沉默 - ITeye博客</a><br><a href="http://www.bubuko.com/infodetail-2041788.html">简介JSP与FreeMarker及Volicity区别</a><br><a href="http://www.runoob.com/jsp/jsp-jstl.html">JSP 标准标签库（JSTL） | 菜鸟教程</a><br><a href="http://www.blogjava.net/kxbin/articles/366505.html">FreeMarker标签介绍 - kxbin - BlogJava</a></p>]]></content>
    
    <summary type="html">
    
      FreeMarker是一款模板引擎： 即一种基于模板和要改变的数据，	并用来生成输出文本（HTML网页、电子邮件、配置文件、源代码等）的通用工具。
    
    </summary>
    
      <category term="java" scheme="http://www.javacoder.fun/categories/java/"/>
    
    
      <category term="freemarker" scheme="http://www.javacoder.fun/tags/freemarker/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.javacoder.fun/2017/12/19/hello-world/"/>
    <id>http://www.javacoder.fun/2017/12/19/hello-world/</id>
    <published>2017-12-19T14:05:16.510Z</published>
    <updated>2015-03-22T06:29:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for m
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AngularJS学习笔记</title>
    <link href="http://www.javacoder.fun/2017/12/19/AngularJS/"/>
    <id>http://www.javacoder.fun/2017/12/19/AngularJS/</id>
    <published>2017-12-19T14:05:16.410Z</published>
    <updated>2017-10-28T14:51:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angular-js是做什么用的？"><a href="#Angular-js是做什么用的？" class="headerlink" title="Angular.js是做什么用的？"></a>Angular.js是做什么用的？</h1><p>Angular.js扩展了html的标签，通过表达式绑定数据到html，比如向页面发送了一个日期，通过angular.js可以绑定日期数据，并且处理显示的格式；也就是说angular就是绑定服务端或页面的数据并进行数据的渲染（输出格式、排序、筛选等操作）。</p><h1 id="Angular-js是怎么使用的？"><a href="#Angular-js是怎么使用的？" class="headerlink" title="Angular.js是怎么使用的？"></a>Angular.js是怎么使用的？</h1><ol><li><p>引入js包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;xxx/angular.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>表达式  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">在Angular.js中将表达式写在双大括号中，eg:`&#123;&#123; x+y &#125;&#125;`  </span><br><span class="line">表达式可以执行数值计算、字符串拼接、数据过滤  </span><br><span class="line">* 数值计算`&#123;&#123; x+y &#125;&#125;`</span><br><span class="line">* 字符串拼接 `&#123;&#123; x+&quot;&quot;+y &#125;&#125;`</span><br><span class="line">* 读取对象，数值`&#123;&#123; array[1] &#125;&#125;`、对象`&#123;&#123; object.param &#125;&#125;`</span><br><span class="line">* 数据状态 `&#123;&#123;myForm.myAddress.$valid&#125;&#125;`</span><br><span class="line">* 数据过滤`&#123;&#123;x. name | uppercase&#125;&#125;`名字以大写形式输出</span><br><span class="line">  * 自定义过滤</span><br><span class="line">  * `orderBy:&#x27;id&#x27;:true以id降序排列`</span><br><span class="line">  * `orderBy:&#x27;id&#x27;以id升序排列`</span><br><span class="line">  * `limitTo :6 // 从前面开始截取6位`</span><br><span class="line">  * `limitTo :-6 // 从后面开始截取6位`</span><br><span class="line">  * `filter:&#123;&#x27;name&#x27;:&#x27;iphone&#x27;&#125;`：</span><br><span class="line">  * `currency:&quot;RMB ￥ &quot;`：货币形式输出</span><br><span class="line">  * `&#123;&#123;149016.1945000 | number:2&#125;&#125;`：2保留2位小数</span><br><span class="line">  * `&#123;&#123;1490161945000 | date:&quot;yyyy-MM-dd HH:mm:ss&quot;&#125;&#125;`：日期格式化</span><br><span class="line">  * `&#123;&#123; &quot;TANK is GOOD&quot; | lowercase &#125;&#125;`  小写输出</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;namesCtrl&quot;&gt;</span><br><span class="line">&lt;p&gt;输入过滤:&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;input type=&quot;text&quot; ng-model=&quot;test&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li ng-repeat=&quot;x in names | filter:test | orderBy:&#x27;country&#x27;&quot;&gt;//filter按test的值筛选结果，orderBy以对象中的country属性排序</span><br><span class="line">    &#123;&#123; (x.name | uppercase) + &#x27;, &#x27; + x.country &#125;&#125;//uppercase大写输出</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var app = angular.module(&#x27;myApp&#x27;, []);</span><br><span class="line">app.controller(&#x27;myCtrl&#x27;, function($scope) &#123;</span><br><span class="line">    $scope.msg = &quot;Runoob&quot;;</span><br><span class="line">&#125;);</span><br><span class="line">app.filter(&#x27;reverse&#x27;, function() &#123; //可以注入依赖</span><br><span class="line">    return function(text) &#123;</span><br><span class="line">        return text.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>表达式中不可以执行循环、判断  </p></li><li><p>应用angular的标签</p><ul><li>ng-app 指令定义一个 AngularJS 应用程序。</li><li>ng-init 指令初始化应用程序数据。</li><li>ng-bind 绑定对象到dom</li><li>ng-repeat 指令对于集合中（数组中）的每个项会克隆一次HTML元素。</li><li>ng-model 获取当前dom的value赋值到对象,实现双向数据绑定<br>css类ng-valid, ng-invalid, ng-dirty, ng-pristine, ng-touched, ng-untouched</li><li>ng-include=”‘runoob.htm’”包含文件  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;select ng-init=&quot;selectedName = names[0]&quot; ng-model=&quot;selectedName&quot; ng-options=&quot;x for x in names&quot;&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">input.ng-invalid &#123;//根据绑定数据的合法性判断，为dom设置css样式</span><br><span class="line">    background-color: lightblue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form ng-app=&quot;&quot; name=&quot;myForm&quot;&gt;</span><br><span class="line">    输入你的名字:</span><br><span class="line">    &lt;input name=&quot;myAddress&quot; ng-model=&quot;text&quot; required&gt;</span><br><span class="line">    &lt;h1&gt;状态&lt;/h1&gt;</span><br><span class="line">    &#123;&#123;myForm.myAddress.$valid&#125;&#125;//运用表达式对绑定数据进行合法性运算</span><br><span class="line">    &#123;&#123;myForm.myAddress.$dirty&#125;&#125;</span><br><span class="line">    &#123;&#123;myForm.myAddress.$touched&#125;&#125;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ul><li>自定义指令（directive ）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body ng-app=&quot;myApp&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;runoob-directive&gt;&lt;/runoob-directive&gt;</span><br><span class="line">&lt;div runoob-directive&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;runoob-directive&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- directive: runoob-directive --&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app = angular.module(&quot;myApp&quot;, []);</span><br><span class="line">app.directive(&quot;runoobDirective&quot;, function() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        restrict : &quot;EACM&quot;,</span><br><span class="line">        replace : true,</span><br><span class="line">        template : &quot;&lt;h1&gt;自定义指令!&lt;/h1&gt;&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;</span><br><span class="line">&lt;p&gt;E 作为元素名使用&lt;/p&gt;</span><br><span class="line">&lt;p&gt;A 作为属性使用&lt;/p&gt;</span><br><span class="line">&lt;p&gt;C 作为类名使用&lt;/p&gt;</span><br><span class="line">&lt;p&gt;M 作为注释使用，我们还需要在该实例添加 &lt;strong&gt;replace&lt;/strong&gt; 属性， 否则注释评论还是不可见的。&lt;/p&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;restrict，默认AE&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>作用域<br>$scope 局部作用域，包含了当前controller中的所有变量及方法，优先于$rootScope<br>$rootScope 全局作用域，包含了当前app中所有的变量及方法  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;myCtrl&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;姓氏为 &#123;&#123;lastname&#125;&#125; 家族成员:&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li ng-repeat=&quot;x in names&quot;&gt;&#123;&#123;x&#125;&#125; &#123;&#123;lastname&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app = angular.module(&#x27;myApp&#x27;, []);</span><br><span class="line"></span><br><span class="line">app.controller(&#x27;myCtrl&#x27;, function($scope, $rootScope) &#123;</span><br><span class="line">    $scope.names = [&quot;Emil&quot;, &quot;Tobias&quot;, &quot;Linus&quot;];</span><br><span class="line">    $rootScope.lastname = &quot;Refsnes&quot;;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;注意 $rootScope 在循环对象内外都可以访问。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/angular.js/1.6.6/angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;p&gt;$rootScope 全局对象的属性可在所有子作用域中访问，子作用域互相无法访问对方的私有变量，这一点与js的函数作用域完全一致。&lt;/p&gt;</span><br><span class="line">&lt;form ng-app=&#x27;myApp&#x27; name=&quot;myForm&quot; ng-init=&quot; myText=&#x27;test&#x27; &quot;&gt;</span><br><span class="line">&lt;div ng-controller=&quot;myCtrl&quot;&gt;</span><br><span class="line">&#123;&#123;myf + allf + mys + alls&#125;&#125; // 1 一 二</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div ng-controller=&quot;myCtrl2&quot;&gt;</span><br><span class="line">&#123;&#123;myf + allf + mys + alls&#125;&#125; // 一 2 二</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">var app = angular.module(&#x27;myApp&#x27;,[]);</span><br><span class="line">// 两个控制器</span><br><span class="line">app.controller(&#x27;myCtrl&#x27;, [&#x27;$scope&#x27;, &#x27;$rootScope&#x27;,myCtrl]);</span><br><span class="line">app.controller(&#x27;myCtrl2&#x27;, [&#x27;$scope&#x27;,&#x27;$rootScope&#x27;, myCtrl2]);</span><br><span class="line"></span><br><span class="line">function myCtrl($scope,$rootScope)&#123;</span><br><span class="line">  $scope.myf = &#x27;1&#x27;;</span><br><span class="line">  $rootScope.allf = &#x27;一&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function myCtrl2($scope,$rootScope)&#123;</span><br><span class="line">  $scope.mys = &#x27;2&#x27;;</span><br><span class="line">  $rootScope.alls = &#x27;二&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>AngularJS 内建了30 多个服务</li></ol><ul><li>$location.absUrl();当前页面url</li><li>自定义服务<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var app = angular.module(&#x27;myApp&#x27;, []);</span><br><span class="line">app.controller(&#x27;myCtrl&#x27;, function($scope, $http) &#123;//调用http服务</span><br><span class="line">    $http.get(&quot;welcome.htm&quot;).then(function (response) &#123;</span><br><span class="line">        $scope.myWelcome = response.data;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> $timeout(function () &#123;//调用timeout服务</span><br><span class="line">        $scope.myHeader = &quot;How are you today?&quot;;</span><br><span class="line">    &#125;, 2000);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.service(&#x27;hexafy&#x27;, function() &#123;//申明自定义服务hexafy</span><br><span class="line">    this.myFunc = function (x) &#123;</span><br><span class="line">        return x.toString(16);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.controller(&#x27;myCtrl&#x27;, function($scope, hexafy) &#123;//调用自定义服务</span><br><span class="line">    $scope.hex = hexafy.myFunc(255);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li>AngularJS 动画<br>AngularJS 提供了动画效果，可以配合 CSS 使用。<br>AngularJS 使用动画需要引入 angular-animate.min.js 库。<br><script src="http://xxx/angular.js/1.4.6/angular-animate.min.js"></script><br>还需在应用中使用模型 ngAnimate：<br><body ng-app="ngAnimate"><br>如果ng-app的名字已经设置了其他名字就需要引入module  </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body ng-app=&quot;myApp&quot;&gt;</span><br><span class="line">&lt;h1&gt;隐藏 DIV: &lt;input type=&quot;checkbox&quot; ng-model=&quot;myCheck&quot;&gt;&lt;/h1&gt;</span><br><span class="line">&lt;div ng-hide=&quot;myCheck&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app = angular.module(&#x27;myApp&#x27;, [&#x27;ngAnimate&#x27;]);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="7"><li>路由<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;AngularJS 路由实例 - 菜鸟教程&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body ng-app=&#x27;routingDemoApp&#x27;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;h2&gt;AngularJS 路由应用&lt;/h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#/&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#/computers&quot;&gt;电脑&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#/printers&quot;&gt;打印机&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#/blabla&quot;&gt;其他&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div ng-view&gt;&lt;/div&gt;</span><br><span class="line">        &lt;script src=&quot;http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;https://apps.bdimg.com/libs/angular-route/1.3.13/angular-route.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            angular.module(&#x27;routingDemoApp&#x27;,[&#x27;ngRoute&#x27;])</span><br><span class="line">            .config([&#x27;$routeProvider&#x27;, function($routeProvider)&#123;</span><br><span class="line">                $routeProvider</span><br><span class="line">                .when(&#x27;/&#x27;,&#123;template:&#x27;这是首页页面&#x27;&#125;)</span><br><span class="line">                .when(&#x27;/computers&#x27;,&#123;template:&#x27;这是电脑分类页面&#x27;&#125;)</span><br><span class="line">                .when(&#x27;/printers&#x27;,&#123;template:&#x27;这是打印机页面&#x27;&#125;)</span><br><span class="line">                .otherwise(&#123;redirectTo:&#x27;/&#x27;&#125;);</span><br><span class="line">            &#125;]);</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="http://www.runoob.com/angularjs/angularjs-tutorial.html">AngularJS 教程 | 菜鸟教程</a>  </p>]]></content>
    
    <summary type="html">
    
      AngularJS是一个JavaScript框架。它是一个以 JavaScript编写的库。我们需要将它的js库添加到HTML页面。AngularJS 通过指令扩展了HTML，且通过表达式绑定数据到HTML。
    
    </summary>
    
      <category term="Angular" scheme="http://www.javacoder.fun/categories/Angular/"/>
    
    
      <category term="Angular" scheme="http://www.javacoder.fun/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Android源码学习——开机过程</title>
    <link href="http://www.javacoder.fun/2017/12/19/Android%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%BC%80%E6%9C%BA%E8%BF%87%E7%A8%8B/"/>
    <id>http://www.javacoder.fun/2017/12/19/Android源码学习——开机过程/</id>
    <published>2017-12-19T14:05:16.390Z</published>
    <updated>2017-05-25T05:45:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从开机到注册APN的过程分析"><a href="#从开机到注册APN的过程分析" class="headerlink" title="从开机到注册APN的过程分析"></a>从开机到注册APN的过程分析</h1><hr><h2 id="手机启动"><a href="#手机启动" class="headerlink" title="手机启动"></a>手机启动</h2><p><img src="http://oeb33qix3.bkt.clouddn.com/16-12-16/21583324-file_1481868417041_61ad.png" alt="">  </p><h2 id="SystemServer-java"><a href="#SystemServer-java" class="headerlink" title="SystemServer.java"></a>SystemServer.java</h2><p>SystemServer.java类是java的系统服务类，在开机后首先会实例化一个SystemServer<br>1、执行main方法，new SystemServer().run();<br>2、执行run方法，调用startBootstrapServices()<br>3、在startBootstrapServices()中调用<br><img src="http://oeb33qix3.bkt.clouddn.com/16-12-11/77821418-file_1481434774122_16d6a.png" alt="">   </p><h2 id="ActivityManagerService-java"><a href="#ActivityManagerService-java" class="headerlink" title="ActivityManagerService.java"></a>ActivityManagerService.java</h2><p>通过AndroidManagerService中的方法将启动配置了属性<code>andriod:persistion=&quot;true&quot;;</code>的app</p><h2 id="PhoneApp"><a href="#PhoneApp" class="headerlink" title="PhoneApp"></a>PhoneApp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PhoneApp.onCreate()&#123;</span><br><span class="line">    new PhoneGlobals(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PhoneGlobals"><a href="#PhoneGlobals" class="headerlink" title="PhoneGlobals"></a>PhoneGlobals</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PhoneGlobals.onCreate()&#123;</span><br><span class="line">    PhoneFactory.makeDefultPhones(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void makeDefaultPhone(Context context) &#123;</span><br><span class="line">    sPhoneNotifier = new DefaultPhoneNotifier();</span><br><span class="line">    sProxyPhone = new PhoneProxy(new GSMPhone(context,</span><br><span class="line">    sCommandsInterface, sPhoneNotifier));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GSMPhone"><a href="#GSMPhone" class="headerlink" title="GSMPhone"></a>GSMPhone</h2><p><img src="http://oeb33qix3.bkt.clouddn.com/16-12-11/92278190-file_1481436430080_e396.png" alt=""></p><h2 id="DcTracker"><a href="#DcTracker" class="headerlink" title="DcTracker"></a>DcTracker</h2><p>DataConnectionTracker：数据连接跟踪者<br>DcTracker是Telephony框架中负责数据业务的核心(类似于GsmCallTracker是通话业务核心，GsmServiceStateTracker是网络CS业务的核心)，所有对数据网络的请求(打开关闭数据开关、切换数据卡、修改APN参数等)都会发送到该处理中心来处理。<br>DcTracker的初始化<br>1、初始化各种监听器；<br>//2、初始化TelephonyNetworkFactory对象；<br>3、初始化一些基本的APN参数；  </p><p><img src="http://oeb33qix3.bkt.clouddn.com/16-12-16/63555222-file_1481858289936_a47d.png" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">public DcTracker(PhoneBase p) &#123;</span><br><span class="line">super(p);</span><br><span class="line">if (DBG) log(&quot;DcTracker.constructor&quot;);</span><br><span class="line"></span><br><span class="line">mDataConnectionTracker = this;</span><br><span class="line">//更新状态</span><br><span class="line">update();</span><br><span class="line"></span><br><span class="line">/** M: create worker handler to handle DB/IO access */</span><br><span class="line">createWorkerHandler();//这里是mtk改的，另启一个线程去添加紧急apn</span><br><span class="line"></span><br><span class="line">//M: Move register all event from update to construct, to avoid register more times.</span><br><span class="line">registerForAllEvents();//注册事件监听（从update方法中移动到这里，为了节省时间）</span><br><span class="line"></span><br><span class="line">mApnObserver = new ApnChangeObserver();//监听apn的变化</span><br><span class="line">p.getContext().getContentResolver().registerContentObserver(</span><br><span class="line">Telephony.Carriers.CONTENT_URI, true, mApnObserver);</span><br><span class="line"></span><br><span class="line">initApnContexts();//初始化apn</span><br><span class="line"></span><br><span class="line">for (ApnContext apnContext : mApnContexts.values()) &#123;</span><br><span class="line">// Register the reconnect and restart actions.</span><br><span class="line">IntentFilter filter = new IntentFilter();</span><br><span class="line">filter.addAction(INTENT_RECONNECT_ALARM + &#x27;.&#x27; + apnContext.getApnType());</span><br><span class="line">filter.addAction(INTENT_RESTART_TRYSETUP_ALARM + &#x27;.&#x27; + apnContext.getApnType());</span><br><span class="line">mPhone.getContext().registerReceiver(mIntentReceiver, filter, null, mPhone);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// M: Fast Dormancy init</span><br><span class="line">mFdMgr = FdManager.getInstance(p);</span><br><span class="line"></span><br><span class="line">//MTK START: Add Plug in</span><br><span class="line">if (!BSP_PACKAGE) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">mGsmDctExt =</span><br><span class="line">MPlugin.createInstance(IGsmDCTExt.class.getName(), mPhone.getContext());</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">if (DBG) &#123;</span><br><span class="line">log(&quot;mGsmDctExt init fail&quot;);</span><br><span class="line">&#125;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//MTK END</span><br><span class="line"></span><br><span class="line">mProvisionActionName = &quot;com.android.internal.telephony.PROVISION&quot; + p.getPhoneId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public void update() &#123;</span><br><span class="line">log(&quot;update sub = &quot; + mPhone.getSubId());</span><br><span class="line">// M: remove for redundantly register that cause ANR</span><br><span class="line">//log(&quot;update(): Active DDS, register for all events now!&quot;);</span><br><span class="line">//registerForAllEvents();</span><br><span class="line">onUpdateIcc();//注册监听sim卡状态、添加了sim载入监听、和fdn定向拨号功能</span><br><span class="line"></span><br><span class="line">mUserDataEnabled = getDataEnabled();//获取用户设置网络的开关状态</span><br><span class="line"></span><br><span class="line">if (mPhone instanceof CDMALTEPhone) &#123;</span><br><span class="line">((CDMALTEPhone)mPhone).updateCurrentCarrierInProvider();</span><br><span class="line">&#125; else if (mPhone instanceof GSMPhone) &#123;</span><br><span class="line">((GSMPhone)mPhone).updateCurrentCarrierInProvider();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">log(&quot;Phone object is not MultiSim. This should not hit!!!!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="createWorkerHandler"><a href="#createWorkerHandler" class="headerlink" title="createWorkerHandler"></a>createWorkerHandler</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/** M: worker handler to handle DB/IO access */</span><br><span class="line">private void createWorkerHandler() &#123;</span><br><span class="line">if (mWorkerHandler == null) &#123;</span><br><span class="line">Thread thread = new Thread() &#123;//另开了一个新的工作线程</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">Looper.prepare();</span><br><span class="line">mWorkerHandler = new WorkerHandler();</span><br><span class="line">mWorkerHandler.sendEmptyMessage(DctConstants.EVENT_INIT_EMERGENCY_APN_SETTINGS);</span><br><span class="line">Looper.loop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">thread.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private class WorkerHandler extends Handler &#123;</span><br><span class="line">@Override</span><br><span class="line">public void handleMessage(Message msg) &#123;</span><br><span class="line">switch (msg.what) &#123;</span><br><span class="line">case DctConstants.EVENT_INIT_EMERGENCY_APN_SETTINGS:</span><br><span class="line">// Add Emergency APN to APN setting list by default to support EPDN in sim absent cases</span><br><span class="line">log(&quot;WorkerHandler received EVENT_INIT_EMERGENCY_APN_SETTINGS&quot;);</span><br><span class="line">initEmergencyApnSetting();//在新的线程中进行紧急apn的初始化和添加</span><br><span class="line">addEmergencyApnSetting();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="registerForAllEvents"><a href="#registerForAllEvents" class="headerlink" title="registerForAllEvents"></a>registerForAllEvents</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">protected void registerForAllEvents() &#123;</span><br><span class="line">if (DBG) &#123;</span><br><span class="line">log(&quot;registerForAllEvents: mPhone = &quot; + mPhone);</span><br><span class="line">&#125;</span><br><span class="line">//监听射频是否打开</span><br><span class="line">mPhone.mCi.registerForAvailable(this, DctConstants.EVENT_RADIO_AVAILABLE, null);</span><br><span class="line">//监听射频是否可用</span><br><span class="line">mPhone.mCi.registerForOffOrNotAvailable(this,</span><br><span class="line">   DctConstants.EVENT_RADIO_OFF_OR_NOT_AVAILABLE, null);</span><br><span class="line">//监听当前链接状态</span><br><span class="line">mPhone.mCi.registerForDataNetworkStateChanged(this,</span><br><span class="line">   DctConstants.EVENT_DATA_STATE_CHANGED, null);</span><br><span class="line">// Note, this is fragile - the Phone is now presenting a merged picture</span><br><span class="line">// of PS (volte) &amp; CS and by diving into its internals you&#x27;re just seeing</span><br><span class="line">// the CS data.  This works well for the purposes this is currently used for</span><br><span class="line">// but that may not always be the case.  Should probably be redesigned to</span><br><span class="line">// accurately reflect what we&#x27;re really interested in (registerForCSVoiceCallEnded).</span><br><span class="line"></span><br><span class="line">// M: Remove below section for the reason that new PS/CS design has been applied.</span><br><span class="line">//mPhone.getCallTracker().registerForVoiceCallEnded (this,</span><br><span class="line">//       DctConstants.EVENT_VOICE_CALL_ENDED, null);</span><br><span class="line">//mPhone.getCallTracker().registerForVoiceCallStarted (this,</span><br><span class="line">//       DctConstants.EVENT_VOICE_CALL_STARTED, null);</span><br><span class="line">// M: End</span><br><span class="line">    //数据连接驻网</span><br><span class="line">mPhone.getServiceStateTracker().registerForDataConnectionAttached(this,</span><br><span class="line">   DctConstants.EVENT_DATA_CONNECTION_ATTACHED, null);</span><br><span class="line">mPhone.getServiceStateTracker().registerForDataConnectionDetached(this,</span><br><span class="line">   DctConstants.EVENT_DATA_CONNECTION_DETACHED, null);</span><br><span class="line">    //数据漫游</span><br><span class="line">mPhone.getServiceStateTracker().registerForDataRoamingOn(this,</span><br><span class="line">   DctConstants.EVENT_ROAMING_ON, null);</span><br><span class="line">mPhone.getServiceStateTracker().registerForDataRoamingOff(this,</span><br><span class="line">   DctConstants.EVENT_ROAMING_OFF, null);</span><br><span class="line">//ps域注册</span><br><span class="line">mPhone.getServiceStateTracker().registerForPsRestrictedEnabled(this,</span><br><span class="line">DctConstants.EVENT_PS_RESTRICT_ENABLED, null);</span><br><span class="line">mPhone.getServiceStateTracker().registerForPsRestrictedDisabled(this,</span><br><span class="line">DctConstants.EVENT_PS_RESTRICT_DISABLED, null);</span><br><span class="line"> //   SubscriptionManager.registerForDdsSwitch(this,</span><br><span class="line"> //          DctConstants.EVENT_CLEAN_UP_ALL_CONNECTIONS, null);</span><br><span class="line">// M: cc33</span><br><span class="line">mPhone.mCi.registerForRemoveRestrictEutran(this, DctConstants.EVENT_REMOVE_RESTRICT_EUTRAN</span><br><span class="line">,null);</span><br><span class="line"></span><br><span class="line">//M: Reset Attach Apn重新注册apn</span><br><span class="line">mPhone.mCi.registerForResetAttachApn(this, DctConstants.EVENT_RESET_ATTACH_APN, null);</span><br><span class="line"></span><br><span class="line">// M: [LTE][Low Power][UL traffic shaping] Start</span><br><span class="line">mPhone.mCi.registerForLteAccessStratumState(this,</span><br><span class="line">DctConstants.EVENT_LTE_ACCESS_STRATUM_STATE, null);</span><br><span class="line">// M: [LTE][Low Power][UL traffic shaping] End</span><br><span class="line">    //监听网络技术(LTE/GSM/UMTS)</span><br><span class="line">mPhone.getServiceStateTracker().registerForDataRegStateOrRatChanged(this,</span><br><span class="line">DctConstants.EVENT_DATA_RAT_CHANGED, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="initApnContent"><a href="#initApnContent" class="headerlink" title="initApnContent"></a>initApnContent</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">protected void initApnContexts() &#123;</span><br><span class="line">log(&quot;initApnContexts: E&quot;);</span><br><span class="line">// Load device network attributes from resources</span><br><span class="line">String[] networkConfigStrings = mPhone.getContext().getResources().getStringArray(//获得配置的默认apn参数</span><br><span class="line">com.android.internal.R.array.networkAttributes);</span><br><span class="line">for (String networkConfigString : networkConfigStrings) &#123;</span><br><span class="line">NetworkConfig networkConfig = new NetworkConfig(networkConfigString);</span><br><span class="line">ApnContext apnContext = null;</span><br><span class="line"></span><br><span class="line">switch (networkConfig.type) &#123;</span><br><span class="line">case ConnectivityManager.TYPE_MOBILE:</span><br><span class="line">apnContext = addApnContext(PhoneConstants.APN_TYPE_DEFAULT, networkConfig);</span><br><span class="line">break;</span><br><span class="line">case ConnectivityManager.TYPE_MOBILE_MMS:</span><br><span class="line">apnContext = addApnContext(PhoneConstants.APN_TYPE_MMS, networkConfig);</span><br><span class="line">break;</span><br><span class="line">case ConnectivityManager.TYPE_MOBILE_SUPL:</span><br><span class="line">apnContext = addApnContext(PhoneConstants.APN_TYPE_SUPL, networkConfig);</span><br><span class="line">break;</span><br><span class="line">case ConnectivityManager.TYPE_MOBILE_DUN:</span><br><span class="line">apnContext = addApnContext(PhoneConstants.APN_TYPE_DUN, networkConfig);</span><br><span class="line">break;</span><br><span class="line">case ConnectivityManager.TYPE_MOBILE_HIPRI:</span><br><span class="line">apnContext = addApnContext(PhoneConstants.APN_TYPE_HIPRI, networkConfig);</span><br><span class="line">break;</span><br><span class="line">case ConnectivityManager.TYPE_MOBILE_FOTA:</span><br><span class="line">apnContext = addApnContext(PhoneConstants.APN_TYPE_FOTA, networkConfig);</span><br><span class="line">break;</span><br><span class="line">case ConnectivityManager.TYPE_MOBILE_IMS:</span><br><span class="line">apnContext = addApnContext(PhoneConstants.APN_TYPE_IMS, networkConfig);</span><br><span class="line">break;</span><br><span class="line">case ConnectivityManager.TYPE_MOBILE_CBS:</span><br><span class="line">apnContext = addApnContext(PhoneConstants.APN_TYPE_CBS, networkConfig);</span><br><span class="line">break;</span><br><span class="line">case ConnectivityManager.TYPE_MOBILE_IA:</span><br><span class="line">apnContext = addApnContext(PhoneConstants.APN_TYPE_IA, networkConfig);</span><br><span class="line">break;</span><br><span class="line">/** M: start */</span><br><span class="line">case ConnectivityManager.TYPE_MOBILE_DM:</span><br><span class="line">apnContext = addApnContext(PhoneConstants.APN_TYPE_DM, networkConfig);</span><br><span class="line">break;</span><br><span class="line">case ConnectivityManager.TYPE_MOBILE_NET:</span><br><span class="line">apnContext = addApnContext(PhoneConstants.APN_TYPE_NET, networkConfig);</span><br><span class="line">break;</span><br><span class="line">case ConnectivityManager.TYPE_MOBILE_WAP:</span><br><span class="line">apnContext = addApnContext(PhoneConstants.APN_TYPE_WAP, networkConfig);</span><br><span class="line">break;</span><br><span class="line">case ConnectivityManager.TYPE_MOBILE_CMMAIL:</span><br><span class="line">apnContext = addApnContext(PhoneConstants.APN_TYPE_CMMAIL, networkConfig);</span><br><span class="line">break;</span><br><span class="line">case ConnectivityManager.TYPE_MOBILE_RCSE:</span><br><span class="line">apnContext = addApnContext(PhoneConstants.APN_TYPE_RCSE, networkConfig);</span><br><span class="line">break;</span><br><span class="line">case ConnectivityManager.TYPE_MOBILE_XCAP:</span><br><span class="line">apnContext = addApnContext(PhoneConstants.APN_TYPE_XCAP, networkConfig);</span><br><span class="line">break;</span><br><span class="line">case ConnectivityManager.TYPE_MOBILE_RCS:</span><br><span class="line">apnContext = addApnContext(PhoneConstants.APN_TYPE_RCS, networkConfig);</span><br><span class="line">break;</span><br><span class="line">/** M: end*/</span><br><span class="line">case ConnectivityManager.TYPE_MOBILE_EMERGENCY:</span><br><span class="line">apnContext = addApnContext(PhoneConstants.APN_TYPE_EMERGENCY, networkConfig);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">log(&quot;initApnContexts: skipping unknown type=&quot; + networkConfig.type);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">log(&quot;initApnContexts: apnContext=&quot; + apnContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//The implement of priorityQueue class is incorrect, we sort the list by ourself对apn进行排序</span><br><span class="line">Collections.sort(mPrioritySortedApnContexts, new Comparator&lt;ApnContext&gt;() &#123;</span><br><span class="line">public int compare(ApnContext c1, ApnContext c2) &#123;</span><br><span class="line">return c2.priority - c1.priority;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">log(&quot;initApnContexts: mPrioritySortedApnContexts=&quot; + mPrioritySortedApnContexts);</span><br><span class="line">log(&quot;initApnContexts: X mApnContexts=&quot; + mApnContexts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此apn的初始化完成</p><h2 id="apn参数的创建"><a href="#apn参数的创建" class="headerlink" title="apn参数的创建"></a>apn参数的创建</h2><p>当sim卡载入完毕后就会触发监听进行apn的创建onRecordsLoaded()<br>当apn改变也会触发监听onApnChanged()  </p><h2 id="onReecordsLoaded"><a href="#onReecordsLoaded" class="headerlink" title="onReecordsLoaded()"></a>onReecordsLoaded()</h2><p>createAllApnlist()  </p><ul><li>获取当前sim卡的apn参数及紧急apn<ul><li>operater获取sim卡的PLMN</li><li>创建mAllApnSetting列表</li><li>添加紧急apn</li><li>合并apn</li><li>寻找适合的apn</li></ul></li><li>合并相同的apn</li><li>寻找当前适合的apn<br>setInitialAttachApn()设置默认apn<br>向modem设置Attach默认的apn</li></ul><h2 id="apn参数激活"><a href="#apn参数激活" class="headerlink" title="apn参数激活"></a>apn参数激活</h2><h2 id="数据连接请求"><a href="#数据连接请求" class="headerlink" title="数据连接请求"></a>数据连接请求</h2>]]></content>
    
    <summary type="html">
    
      本篇介绍一下安卓手机从开机进入java层运行到启动网络注册apn的过程，用于分析手机网络问题
    
    </summary>
    
      <category term="android源码" scheme="http://www.javacoder.fun/categories/android%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="android源码,android" scheme="http://www.javacoder.fun/tags/android%E6%BA%90%E7%A0%81-android/"/>
    
  </entry>
  
  <entry>
    <title>安卓源码学习（2）——内置系统app</title>
    <link href="http://www.javacoder.fun/2017/03/03/%E5%AE%89%E5%8D%93%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E5%86%85%E7%BD%AE%E7%B3%BB%E7%BB%9Fapp/"/>
    <id>http://www.javacoder.fun/2017/03/03/安卓源码学习（2）——内置系统app/</id>
    <published>2017-03-03T03:45:54.000Z</published>
    <updated>2017-03-16T14:59:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/suofeng1234/article/details/51801008">android预置apk，覆盖原生apk总结 - suofeng的专栏 - 博客频道 - CSDN.NET</a>  </p><h1 id="如何将带源码的APK预置进系统？"><a href="#如何将带源码的APK预置进系统？" class="headerlink" title="如何将带源码的APK预置进系统？"></a>如何将带源码的APK预置进系统？</h1><ul><li>在 packages/apps 下面以需要预置的 APK的 名字创建一个新文件夹，以预制一个名为RecordingCar的APK 为例</li><li>将 的Source code 拷贝到 RecordingCar文件夹下，删除 /bin 和 /gen 目录</li><li><p>在 RecordingCar目录下创建一个名为 Android.mk的文件，内容如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">OCAL_PATH:= $(call my-dir)  </span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE_TAGS := optional</span><br><span class="line">LOCAL_SRC_FILES := $(call all-java-files-under, src) \</span><br><span class="line">LOCAL_PACKAGE_NAME := Recorderingcar</span><br><span class="line">LOCAL_JAVA_LIBRARIES := telephony-common   //所需要的库文件，没有的话，可以不写</span><br><span class="line">include $(BUILD_PACKAGE)</span><br></pre></td></tr></table></figure></li><li><p>mtk打开文件 build/target/product/${Project}.mk （其中 ${Project} 表示工程名）<br>将 Recorderingcar添加到 PRODUCT_PACKAGES 里面。<br>如果是高通平台，可以在device，或者build的mkfile文件加入编译选项。<br>另外一种方法就是mk文件中将LOCAL_MODULE_TAGS 属性值设为:= eng user debug，这样不管编译什么版本，该apk都可以编译进去。</p></li><li>make　clean 然后重新编译整个工程。</li></ul><h1 id="如何将无源码的-APK-预置进系统？"><a href="#如何将无源码的-APK-预置进系统？" class="headerlink" title="如何将无源码的 APK 预置进系统？"></a>如何将无源码的 APK 预置进系统？</h1><ul><li>在配置文件中，如device/qcom/project下加入3rdApp文件夹，在该文件夹下创建app,lib和Android.mk文件。</li><li>将  Recorderingcar.apk 放到app目录 下面</li><li>将库文件放到lib目录下</li><li>在修改 Android.mk，文件内容如下：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    LOCAL_PATH := $(call my-dir)</span><br><span class="line">    include $(CLEAR_VARS)</span><br><span class="line">    # Module name should match apk name to be installed</span><br><span class="line">    LOCAL_MODULE := Test</span><br><span class="line">    LOCAL_MODULE_TAGS := optional</span><br><span class="line">    LOCAL_SRC_FILES := $(LOCAL_MODULE).apk</span><br><span class="line">    LOCAL_MODULE_CLASS := APPS</span><br><span class="line">    LOCAL_MODULE_SUFFIX := $(COMMON_ANDROID_PACKAGE_SUFFIX)</span><br><span class="line">    LOCAL_CERTIFICATE := PRESIGNED</span><br><span class="line">    include $(BUILD_PREBUILT)</span><br><span class="line">    ```  </span><br><span class="line">* 在mk文件中，将lib目录下的库文件copy到system/lib目录下  </span><br><span class="line">    其余的步骤和上面类似。  </span><br><span class="line">    如果预置的同时，要覆盖原生apk，则关于android.mk中的LOCAL_OVERRIDES_PACKAGES需要说明一下，此变量可以使其他的模块不加入编译，</span><br><span class="line">    如: 需要预置第三方的Launcher启动器，则在预置apk的mk文件中加入：  </span><br></pre></td></tr></table></figure>  LOCAL_OVERRIDES_PACKAGES := Luancher2<br>  <code>`</code><br>  这样系统就不会将原生的Launcher编译进去，当然也可以在mk文件中编译开关中将相应Launcher注释掉。<br>  KK-android4.4版本上应用权限无法获取的问题是预置apk以后发现原因查了下,发现现在增加了一个priv-app的文件夹，对于android:protectionLevel=”signature|system”的权限，并且签名不一致的情况下，建议放在priv-app下面，否则PackageManager 会拒绝分配给你权限。（有兴趣的同学可以参见：PackageManagerService 的 grantSignaturePermission 方法）<br>  加入priv-app方法：在Android.mk中增加 LOCAL_PRIVILEGED_MODULE := true</li></ul>]]></content>
    
    <summary type="html">
    
      在进行app源码开发的时候经常会遇到需求就是内置系统app，那么如果才能将一个app内置的系统中去呢？
    
    </summary>
    
      <category term="android" scheme="http://www.javacoder.fun/categories/android/"/>
    
    
      <category term="android源码" scheme="http://www.javacoder.fun/tags/android%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Android学习笔记（11）——RecyclerView</title>
    <link href="http://www.javacoder.fun/2016/11/02/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%8811%EF%BC%89%E2%80%94%E2%80%94RecyclerView/"/>
    <id>http://www.javacoder.fun/2016/11/02/Android学习笔记（11）——RecyclerView/</id>
    <published>2016-11-02T08:18:39.000Z</published>
    <updated>2016-11-02T14:28:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么recyclerview是一个容器"><a href="#为什么recyclerview是一个容器" class="headerlink" title="为什么recyclerview是一个容器"></a>为什么recyclerview是一个容器</h2><ul><li>可以自定义显示的位置——layoutmanager</li><li>可以自定义的item之间分隔——ItemDecoration</li><li>可以自定义增删动画——ItemAnimator</li><li>仅仅控制item的回收与复用——adapter针对的不是view而是ViewHolder</li></ul><h2 id="那recyclerview到底是什么样子呢"><a href="#那recyclerview到底是什么样子呢" class="headerlink" title="那recyclerview到底是什么样子呢"></a>那recyclerview到底是什么样子呢</h2><p>既可以实现ListView也可以实现GridView，还能实现瀑布流。<br>是不是感觉很神奇\^_^   </p><p><img src="http://oeb33qix3.bkt.clouddn.com/16-10-10/23778082.jpg" alt="image"><br><img src="http://oeb33qix3.bkt.clouddn.com/16-10-10/23593608.jpg" alt="image"><br><img src="http://oeb33qix3.bkt.clouddn.com/16-10-10/88905249.jpg" alt="image"><br><img src="http://oeb33qix3.bkt.clouddn.com/16-10-9/17122114.jpg" alt="image">  </p><h2 id="如何实现recyclerview"><a href="#如何实现recyclerview" class="headerlink" title="如何实现recyclerview"></a>如何实现recyclerview</h2><ul><li>首先需要导入v7的recyclerview的资源包</li><li>在layout文件中放置recyclerview</li><li>在activity中配置recycleview<ul><li>layoutmanager</li><li>ItemDecoration</li><li>ItemAnimator</li><li>adapter</li></ul></li></ul><h2 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h2><pre><code>@Overrideprotected void onCreate(Bundle savedInstanceState) &#123;    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    initData();//初始化数据    recyclerView= (RecyclerView) findViewById(R.id.myRecyclerView);//绑定recyclerview    //recyclerView.setLayoutManager(new LinearLayoutManager(this));//按类似listview的方式展示数据    //recyclerView.setLayoutManager(new GridLayoutManager(this,4));//按类似GridVIew的方式展示数据    recyclerView.setLayoutManager(new StaggeredGridLayoutManager(3,            StaggeredGridLayoutManager.VERTICAL));//按瀑布流的方式展示数据    recyclerAdapter=new RecyclerAdapter();    recyclerView.setAdapter(recyclerAdapter);//绑定数据填充器    recyclerView.setItemAnimator(new DefaultItemAnimator());//设置添加删除动画效果    //recyclerView.addItemDecoration(new DividerItemDecoration(this,DividerItemDecoration.VERTICAL_LIST));//设置listview形式的边框    //recyclerView.addItemDecoration(new DividerGridItemDecoration(this));//设置gridView形式的边框&#125;class RecyclerAdapter extends RecyclerView.Adapter&lt;RecyclerAdapter.MyViewHolder&gt;&#123;    @Override    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;        MyViewHolder holder = new MyViewHolder(LayoutInflater.from(                MainActivity.this).inflate(R.layout.item_recycler, parent,                false));        return holder;    &#125;    @Override    public void onBindViewHolder(MyViewHolder holder, int position) &#123;        //holder.text_recy.setHeight();        holder.text_recy.setText(dataList.get(position));        holder.text_recy.getLayoutParams().height=dataHeight.get(position);    &#125;    @Override    public int getItemCount() &#123;        return dataList.size();    &#125;    class MyViewHolder extends RecyclerView.ViewHolder &#123;        TextView text_recy;        public MyViewHolder(View itemView) &#123;            super(itemView);            text_recy= (TextView) itemView.findViewById(R.id.text_recy);        &#125;    &#125;    public void addData(int position)&#123;        dataList.add(position,&quot;inset&quot;);        dataHeight.add(position,(int)(Math.random()*200)+100);//添加子模块设置随机高度，实现瀑布流效果        notifyItemInserted(position);    &#125;    public void delData(int position)&#123;        dataList.remove(position);        dataHeight.remove(position);//维护每个子模块的高度，避免重新加载时修改了高度        notifyItemRemoved(position);    &#125;&#125;</code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>最后附上hongyang大神的链接：<a href="http://blog.csdn.net/lmj623565791/article/details/45059587">Android RecyclerView 使用完全解析 体验艺术般的控件</a></p>]]></content>
    
    <summary type="html">
    
      recyclerview是android的v7包中的一个组件，相当于一个容器。
    
    </summary>
    
      <category term="android" scheme="http://www.javacoder.fun/categories/android/"/>
    
    
      <category term="android" scheme="http://www.javacoder.fun/tags/android/"/>
    
  </entry>
  
</feed>
